===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./kmeans.profile 10000 10 
  2. ./kmeans.profile 100000 10 
  3. ./kmeans.profile 1000000 10 
  4. ./kmeans.profile 1000000 20 
  5. ./kmeans.profile 1000000 50 
  6. ./kmeans.profile 10000 10 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 3.7e+09/4.01496e+09 dist2
  2. 2.9e+08/4.01496e+09 nearest
  3. 6.2e+06/4.01496e+09 randf
  4. 7.7e+03/4.01496e+09 lloyd
  5. 1e+02/4.01496e+09 kpp
  6.     6/4.01496e+09 gen_xy
  7.     6/4.01496e+09 main

  NOTE: 1 function was never executed!

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 19.5201% 4698357538/2.40693e+10	nearest() - if.end
  2. 15.4655% 3722432704/2.40693e+10	nearest() - for.inc
  3. 15.4655% 3722432704/2.40693e+10	dist2() - entry
  4. 15.4655% 3722432704/2.40693e+10	nearest() - for.body3
  5. 11.4108% 2746507870/2.40693e+10	nearest() - for.body3.if.end_crit_edge
  6. 4.05465% 975924834/2.40693e+10	nearest() - if.then
  7. 2.3788% 572560000/2.40693e+10	nearest() - for.cond1
  8. 1.5138% 364360000/2.40693e+10	nearest() - for.cond
  9. 1.1894% 286280000/2.40693e+10	nearest() - for.body
 10. 1.1894% 286280000/2.40693e+10	nearest() - for.inc5
 11. 1.1894% 286280000/2.40693e+10	nearest() - for.end
 12. 1.1894% 286280000/2.40693e+10	nearest() - entry
 13. 1.1894% 286280000/2.40693e+10	nearest() - for.end8
 14. 0.865003% 208200000/2.40693e+10	nearest() - if.then9
 15. 0.852041% 205080330/2.40693e+10	lloyd() - for.cond1
 16. 0.85204% 205080000/2.40693e+10	lloyd() - for.inc
 17. 0.85204% 205080000/2.40693e+10	lloyd() - for.body3
 18. 0.85204% 205080000/2.40693e+10	lloyd() - for.inc25
 19. 0.85204% 205080000/2.40693e+10	lloyd() - for.body32.if.end_crit_edge
 20. 0.85204% 205080000/2.40693e+10	lloyd() - if.then
