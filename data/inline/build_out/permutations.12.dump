===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./permutations.profile 8 
  2. ./permutations.profile 9 
  3. ./permutations.profile 10 
  4. ./permutations.profile 11 
  5. ./permutations.profile 12 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.6e+09/2.99038e+09 show
  2. 5.2e+08/2.99038e+09 next_lex_perm
  3. 5.2e+08/2.99038e+09 boothroyd
  4. 3.8e+08/2.99038e+09 perm3
  5.     5/2.99038e+09 perm1
  6.     5/2.99038e+09 perm2

  NOTE: 1 function was never executed!

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 9.45433% 3069923456/3.24711e+10	show() - for.cond
  2. 4.83154% 1568851200/3.24711e+10	show() - for.end
  3. 4.83154% 1568851200/3.24711e+10	show() - entry
  4. 4.6228% 1501072256/3.24711e+10	show() - for.body
  5. 4.6228% 1501072256/3.24711e+10	show() - for.inc
  6. 3.92411% 1274201933/3.24711e+10	next_lex_perm() - land.end
  7. 3.22102% 1045900795/3.24711e+10	next_lex_perm() - for.cond
  8. 3.22102% 1045900795/3.24711e+10	perm1() - if.end
  9. 3.22102% 1045900790/3.24711e+10	boothroyd() - cond.end
 10. 2.76731% 898576169/3.24711e+10	perm3() - if.end
 11. 2.76731% 898576164/3.24711e+10	perm1() - do.body
 12. 2.76731% 898576164/3.24711e+10	next_lex_perm() - land.rhs
 13. 2.62855% 853518092/3.24711e+10	perm3() - while.cond2
 14. 2.48515% 806954606/3.24711e+10	next_lex_perm() - for.cond19
 15. 2.18891% 710763257/3.24711e+10	next_lex_perm() - for.cond6
 16. 1.61051% 522950405/3.24711e+10	perm2() - if.end
 17. 1.61051% 522950400/3.24711e+10	boothroyd() - entry
 18. 1.61051% 522950400/3.24711e+10	perm3() - if.then
 19. 1.61051% 522950400/3.24711e+10	perm1() - do.body.if.end_crit_edge
 20. 1.61051% 522950400/3.24711e+10	next_lex_perm() - return
