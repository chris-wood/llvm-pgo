===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 6.8e+07/6.82439e+07 factor
  2.     8/6.82439e+07 xferFactors

  NOTE: 1 function was never executed!

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 29.9802% 3550484108/1.18428e+10	xferFactors() - for.end
  2. 29.8913% 3539960456/1.18428e+10	factor() - entry.for.end_crit_edge
  3. 17.6362% 2088612758/1.18428e+10	factor() - if.end.i
  4. 17.0876% 2023645693/1.18428e+10	factor() - entry.for.body_crit_edge
  5. 2.5857% 306218146/1.18428e+10	factor() - for.inc
  6. 0.652324% 77253159/1.18428e+10	factor() - for.end
  7. 0.57625% 68243935/1.18428e+10	factor() - entry
  8. 0.573987% 67975902/1.18428e+10	factor() - if.else.i
  9. 0.168379% 19940731/1.18428e+10	factor() - for.body
 10. 0.11954% 14156800/1.18428e+10	factor() - if.end
 11. 0.103665% 12276778/1.18428e+10	xferFactors() - for.body.for.body_crit_edge
 12. 0.0924615% 10949993/1.18428e+10	factor() - for.body.for.inc_crit_edge
 13. 0.0760737% 9009225/1.18428e+10	xferFactors() - for.body
 14. 0.0760392% 9005136/1.18428e+10	factor() - xferFactors.exit
 15. 0.0759958% 8999997/1.18428e+10	factor() - if.end14
 16. 0.0759957% 8999994/1.18428e+10	factor() - for.end.if.end14_crit_edge
 17. 0.0759957% 8999991/1.18428e+10	factor() - if.then.i49
 18. 0.0759956% 8999977/1.18428e+10	factor() - for.inc.for.body_crit_edge
 19. 0.0759523% 8994852/1.18428e+10	factor() - if.end.i.xferFactors.exit_crit_edge
 20. 7.78281e-05%  9217/1.18428e+10	factor() - if.then4
WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 
  86. ./fft.profile 8192 
  87. ./factor.profile 4000000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.2e+09/2.00704e+09 xferFactors
  2. 5e+08/2.00704e+09 main
  3. 2.8e+08/2.00704e+09 factor

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 9.46419% 3984711885/4.2103e+10	factor() - for.inc
  2. 8.70681% 3665829580/4.2103e+10	factor() - if.end14
  3. 8.67215% 3651238367/4.2103e+10	factor() - if.else.i
  4. 8.05639% 3391985356/4.2103e+10	factor() - if.then.i
  5. 8.00713% 3371242956/4.2103e+10	factor() - if.end5
  6. 7.21822% 3039088243/4.2103e+10	factor() - if.end.i
  7. 6.55348% 2759213179/4.2103e+10	factor() - entry.for.body_crit_edge
  8. 5.85266% 2464145377/4.2103e+10	factor() - if.then4
  9. 4.77937% 2012259084/4.2103e+10	xferFactors() - for.end
 10. 4.50489% 1896696885/4.2103e+10	factor() - for.end
 11. 2.99988% 1263038474/4.2103e+10	factor() - entry.for.end_crit_edge
 12. 2.90032% 1221123341/4.2103e+10	xferFactors() - entry
 13. 2.68169% 1129072483/4.2103e+10	factor() - if.end18
 14. 2.64092% 1111905345/4.2103e+10	xferFactors() - if.end
 15. 2.64008% 1111555325/4.2103e+10	xferFactors() - if.then
 16. 1.78875% 753117000/4.2103e+10	xferFactors() - if.end.for.end_crit_edge
 17. 1.33821% 563427164/4.2103e+10	xferFactors() - for.body
 18. 1.27781% 537996276/4.2103e+10	factor() - if.then.i49
 19. 1.18993% 500996313/4.2103e+10	main() - entry
 20. 1.18993% 500996306/4.2103e+10	factor() - for.body.lr.ph.i57
