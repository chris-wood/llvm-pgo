WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.1e+07/1.09408e+07 main
  2.     8/1.09408e+07 bubbleSort

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 22.7568% 1262609346/5.54827e+09	bubbleSort() - for.end16
  2. 22.7479% 1262115616/5.54827e+09	bubbleSort() - for.cond1.outer
  3. 16.621% 922176658/5.54827e+09	main() - for.end.bubbleSort.exit_crit_edge
  4. 13.3055% 738226246/5.54827e+09	bubbleSort() - for.end.for.end16_crit_edge
  5. 6.05952% 336198948/5.54827e+09	main() - for.body
  6. 4.00149% 222013847/5.54827e+09	main() - for.end.for.cond1.preheader.i_crit_edge
  7. 3.91719% 217336132/5.54827e+09	bubbleSort() - for.cond1.preheader
  8. 3.9035% 216577045/5.54827e+09	bubbleSort() - for.end.for.cond1.preheader_crit_edge
  9. 1.53638% 85242458/5.54827e+09	main() - bubbleSort.exit
 10. 1.00907% 55986113/5.54827e+09	main() - for.cond1.outer.i
 11. 0.601519% 33373919/5.54827e+09	bubbleSort() - for.body3.for.cond1_crit_edge
 12. 0.504908% 28013672/5.54827e+09	main() - for.cond1.preheader.i
 13. 0.504662% 28000010/5.54827e+09	bubbleSort() - for.cond1
 14. 0.504661% 27999986/5.54827e+09	main() - for.body3.i
 15. 0.504661% 27999986/5.54827e+09	main() - for.end.i.for.cond1.preheader.i_crit_edge
 16. 0.504658% 27999813/5.54827e+09	main() - for.body3.i.for.cond1.i_crit_edge
 17. 0.292958% 16254105/5.54827e+09	main() - entry.bubbleSort.exit_crit_edge
 18. 0.210829% 11697375/5.54827e+09	main() - entry.for.body_crit_edge
 19. 0.197192% 10940743/5.54827e+09	main() - entry
 20. 0.195931% 10870809/5.54827e+09	bubbleSort() - for.body3
WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 
  86. ./fft.profile 8192 
  87. ./factor.profile 4000000 
  88. ./factor.profile 5000000 
  89. ./factor.profile 6000000 
  90. ./factor.profile 2000000 
  91. ./factor.profile 6000000 
  92. ./fft.profile 128 
  93. ./bubble.profile 50000 
  94. ./bubble.profile 100000 
  95. ./bubble.profile 150000 
  96. ./bubble.profile 200000 
  97. ./bubble.profile 250000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.2e+09/1.2454e+09 bubbleSort
  2. 2.2e+07/1.2454e+09 main

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 22.5409% 7402557848/3.28406e+10	main() - for.body
  2. 11.5871% 3805276312/3.28406e+10	main() - for.end.for.cond1.preheader.i_crit_edge
  3. 10.2707% 3372969867/3.28406e+10	main() - for.body.for.body_crit_edge
  4. 8.32037% 2732458604/3.28406e+10	main() - bubbleSort.exit
  5. 7.23378% 2375616976/3.28406e+10	bubbleSort() - for.end16
  6. 6.10481% 2004854445/3.28406e+10	bubbleSort() - for.cond1.preheader
  7. 5.61699% 1844652144/3.28406e+10	main() - for.end.bubbleSort.exit_crit_edge
  8. 4.52338% 1485505258/3.28406e+10	bubbleSort() - for.cond1.outer
  9. 4.48181% 1471852193/3.28406e+10	bubbleSort() - for.end.for.end16_crit_edge
 10. 4.01474% 1318464186/3.28406e+10	bubbleSort() - for.cond1
 11. 3.72457% 1223170341/3.28406e+10	bubbleSort() - entry
 12. 3.38781% 1112578325/3.28406e+10	bubbleSort() - entry.for.cond1.preheader_crit_edge
 13. 2.7491% 902820219/3.28406e+10	main() - for.cond1.preheader.i
 14. 1.94703% 639417227/3.28406e+10	bubbleSort() - for.body3
 15. 1.31877% 433093458/3.28406e+10	bubbleSort() - for.end.for.cond1.preheader_crit_edge
 16. 0.557498% 183085620/3.28406e+10	main() - for.body3.i.for.cond1.i_crit_edge
 17. 0.353502% 116092232/3.28406e+10	main() - for.cond1.outer.i
 18. 0.336754% 110592016/3.28406e+10	bubbleSort() - entry.for.end16_crit_edge
 19. 0.257946% 84710913/3.28406e+10	bubbleSort() - for.body3.for.cond1_crit_edge
 20. 0.170521% 55999978/3.28406e+10	main() - for.body3.i
