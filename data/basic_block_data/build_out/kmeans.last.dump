===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 3.4e+07/6.2088e+07 dist2
  2. 2.8e+07/6.2088e+07 nearest
  3. 1.4e+04/6.2088e+07 kpp
  4. 4.2e+02/6.2088e+07 lloyd
  5.    12/6.2088e+07 randf
  6.     4/6.2088e+07 gen_xy

  NOTE: 2 functions were never executed!

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 11.8371% 3674373561/3.10411e+10	nearest() - for.inc5.us
  2. 11.5436% 3583262465/3.10411e+10	nearest() - if.then9
  3. 10.9274% 3391985339/3.10411e+10	nearest() - for.end8.if.end10_crit_edge
  4. 10.8506% 3368155449/3.10411e+10	nearest() - for.body3.us
  5. 8.25782% 2563320007/3.10411e+10	kpp() - for.body25.lr.ph.nearest.exit94_crit_edge
  6. 7.93829% 2464136160/3.10411e+10	nearest() - for.body3.us.for.body3.us_crit_edge
  7. 7.83768% 2432905408/3.10411e+10	kpp() - for.cond3.preheader
  8. 5.75878% 1787591946/3.10411e+10	nearest() - for.inc5.us.for.body3.lr.ph.us_crit_edge
  9. 4.10844% 1275305531/3.10411e+10	nearest() - for.body3.lr.ph.us
 10. 4.06592% 1262106422/3.10411e+10	nearest() - for.body.lr.ph.split.us
 11. 3.06199% 950475480/3.10411e+10	nearest() - if.end10
 12. 2.43171% 754830349/3.10411e+10	nearest() - for.end8
 13. 1.47275% 457159712/3.10411e+10	kpp() - for.end30
 14. 1.05513% 327523231/3.10411e+10	kpp() - for.cond23.preheader
 15. 0.973162% 302080427/3.10411e+10	kpp() - for.body11
 16. 0.97316% 302080000/3.10411e+10	kpp() - if.end
 17. 0.97316% 302080000/3.10411e+10	kpp() - for.inc20.for.cond3.preheader_crit_edge
 18. 0.97316% 302080000/3.10411e+10	kpp() - for.inc20.for.cond23.preheader_crit_edge
 19. 0.973159% 302079573/3.10411e+10	kpp() - for.body11.lr.ph
 20. 0.698837% 216927041/3.10411e+10	nearest() - entry.for.end8_crit_edge
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 
  86. ./fft.profile 8192 
  87. ./factor.profile 4000000 
  88. ./factor.profile 5000000 
  89. ./factor.profile 6000000 
  90. ./factor.profile 2000000 
  91. ./factor.profile 6000000 
  92. ./fft.profile 128 
  93. ./bubble.profile 50000 
  94. ./bubble.profile 100000 
  95. ./bubble.profile 150000 
  96. ./bubble.profile 200000 
  97. ./bubble.profile 250000 
  98. ./bubble.profile 50000 
  99. ./fft.profile 8192 
  100. ./bubble.profile 250000 
  101. ./quicksort.profile 50000 
  102. ./quicksort.profile 100000 
  103. ./quicksort.profile 150000 
  104. ./quicksort.profile 50000 
  105. ./huffman_priority_queue.profile 100 
  106. ./huffman_priority_queue.profile 1000 
  107. ./huffman_priority_queue.profile 10000 
  108. ./huffman_priority_queue.profile 100000 
  109. ./huffman_priority_queue.profile 1000000 
  110. ./huffman_priority_queue.profile 100 
  111. ./huffman_priority_queue.profile 1000000 
  112. ./huffman.profile 100 
  113. ./huffman.profile 1000 
  114. ./huffman.profile 10000 
  115. ./huffman.profile 100000 
  116. ./kmeans.profile 10000 10 
  117. ./kmeans.profile 100000 10 
  118. ./kmeans.profile 1000000 10 
  119. ./kmeans.profile 1000000 20 
  120. ./kmeans.profile 1000000 50 
  121. ./huffman.profile 1000000 
  122. ./kmeans.profile 10000 10 
  123. ./kmeans.profile 1000000 50 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.4e+09/3.17941e+09 randf
  2. 1.2e+09/3.17941e+09 gen_xy
  3. 5.6e+08/3.17941e+09 nearest
  4. 8.5e+07/3.17941e+09 dist2
  5. 2.8e+04/3.17941e+09 kpp
  6. 8.5e+02/3.17941e+09 lloyd

  NOTE: 2 functions were never executed!

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 5.83773% 3575025255/6.124e+10	nearest() - for.inc5.us.for.body3.lr.ph.us_crit_edge
  2. 4.98657% 3053779826/6.124e+10	nearest() - for.inc5.us
  3. 4.68902% 2871558754/6.124e+10	nearest() - if.then9
  4. 4.57817% 2803673544/6.124e+10	lloyd() - for.body18.for.body18_crit_edge
  5. 4.0645% 2489098382/6.124e+10	nearest() - for.end8.if.end10_crit_edge
  6. 3.98668% 2441443616/6.124e+10	nearest() - for.body3.us
  7. 3.10441% 1901142087/6.124e+10	nearest() - if.end10
  8. 2.81141% 1721705501/6.124e+10	lloyd() - for.cond1.preheader.for.cond16.loopexit_crit_edge
  9. 2.54697% 1559766886/6.124e+10	kpp() - for.inc20
 10. 2.45221% 1501731476/6.124e+10	nearest() - for.end8
 11. 2.35364% 1441372868/6.124e+10	nearest() - for.body.lr.ph.split.us
 12. 2.31125% 1415413169/6.124e+10	kpp() - for.end30
 13. 2.21137% 1354246345/6.124e+10	randf() - entry
 14. 2.10365% 1288276023/6.124e+10	nearest() - for.body3.lr.ph.us
 15. 1.99332% 1220709035/6.124e+10	lloyd() - for.body3
 16. 1.98558% 1215967000/6.124e+10	gen_xy() - for.body.for.body_crit_edge
 17. 1.92393% 1178213345/6.124e+10	gen_xy() - entry.for.end_crit_edge
 18. 1.92376% 1178113329/6.124e+10	gen_xy() - entry
 19. 1.71713% 1051570105/6.124e+10	kpp() - for.body25.lr.ph.nearest.exit94_crit_edge
 20. 1.70666% 1045158814/6.124e+10	lloyd() - for.cond16.loopexit
