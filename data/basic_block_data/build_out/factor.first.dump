===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.7e+08/1.69138e+08 factor
  2.     8/1.69138e+08 xferFactors

  NOTE: 1 function was never executed!

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 25.1266% 4039374429/1.60761e+10	factor() - if.end.i
  2. 24.0949% 3873513746/1.60761e+10	factor() - entry.for.body_crit_edge
  3. 22.0855% 3550484108/1.60761e+10	xferFactors() - for.end
  4. 22.0201% 3539960551/1.60761e+10	factor() - entry.for.end_crit_edge
  5. 1.90481% 306218336/1.60761e+10	factor() - for.inc
  6. 1.18901% 191146581/1.60761e+10	factor() - for.end
  7. 1.05211% 169137553/1.60761e+10	factor() - entry
  8. 1.05044% 168869520/1.60761e+10	factor() - if.else.i
  9. 0.204905% 32940725/1.60761e+10	factor() - for.body
 10. 0.157232% 25276772/1.60761e+10	xferFactors() - for.body.for.body_crit_edge
 11. 0.136919% 22011226/1.60761e+10	factor() - xferFactors.exit
 12. 0.136907% 22009219/1.60761e+10	xferFactors() - for.body
 13. 0.136849% 21999994/1.60761e+10	factor() - if.end14
 14. 0.136849% 21999988/1.60761e+10	factor() - for.end.if.end14_crit_edge
 15. 0.136849% 21999982/1.60761e+10	factor() - if.then.i49
 16. 0.136849% 21999876/1.60761e+10	factor() - for.inc.for.body_crit_edge
 17. 0.136779% 21988750/1.60761e+10	factor() - if.end.i.xferFactors.exit_crit_edge
 18. 0.0880619% 14156895/1.60761e+10	factor() - if.end
 19. 0.0681136% 10949993/1.60761e+10	factor() - for.body.for.inc_crit_edge
 20. 6.99051e-05% 11238/1.60761e+10	factor() - for.body.lr.ph.i
WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 
  86. ./fft.profile 8192 
  87. ./factor.profile 4000000 
  88. ./factor.profile 5000000 
  89. ./factor.profile 6000000 
  90. ./factor.profile 2000000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.2e+09/2.10793e+09 xferFactors
  2. 5e+08/2.10793e+09 main
  3. 3.9e+08/2.10793e+09 factor

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 10.5565% 3984712075/3.77464e+10	factor() - for.inc
  2. 9.94037% 3752131985/3.77464e+10	factor() - if.else.i
  3. 9.74617% 3678829577/3.77464e+10	factor() - if.end14
  4. 8.98625% 3391985451/3.77464e+10	factor() - if.then.i
  5. 8.9313% 3371243051/3.77464e+10	factor() - if.end5
  6. 6.52816% 2464145472/3.77464e+10	factor() - if.then4
  7. 5.331% 2012259084/3.77464e+10	xferFactors() - for.end
  8. 5.32657% 2010590307/3.77464e+10	factor() - for.end
  9. 3.34612% 1263038569/3.77464e+10	factor() - entry.for.end_crit_edge
 10. 3.23507% 1221123341/3.77464e+10	xferFactors() - entry
 11. 2.99121% 1129072486/3.77464e+10	factor() - if.end18
 12. 2.94573% 1111905345/3.77464e+10	xferFactors() - if.end
 13. 2.9448% 1111555325/3.77464e+10	xferFactors() - if.then
 14. 1.9952% 753117000/3.77464e+10	xferFactors() - if.end.for.end_crit_edge
 15. 1.84092% 694882618/3.77464e+10	factor() - if.end.i
 16. 1.5271% 576427158/3.77464e+10	xferFactors() - for.body
 17. 1.45973% 550996267/3.77464e+10	factor() - if.then.i49
 18. 1.32727% 500996313/3.77464e+10	main() - entry
 19. 1.32727% 500996306/3.77464e+10	factor() - for.body.lr.ph.i57
 20. 1.32727% 500996306/3.77464e+10	factor() - if.end.i56
