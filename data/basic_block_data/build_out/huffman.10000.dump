WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 
  86. ./fft.profile 8192 
  87. ./factor.profile 4000000 
  88. ./factor.profile 5000000 
  89. ./factor.profile 6000000 
  90. ./factor.profile 2000000 
  91. ./factor.profile 6000000 
  92. ./fft.profile 128 
  93. ./bubble.profile 50000 
  94. ./bubble.profile 100000 
  95. ./bubble.profile 150000 
  96. ./bubble.profile 200000 
  97. ./bubble.profile 250000 
  98. ./bubble.profile 50000 
  99. ./fft.profile 8192 
  100. ./bubble.profile 250000 
  101. ./quicksort.profile 50000 
  102. ./quicksort.profile 100000 
  103. ./quicksort.profile 150000 
  104. ./quicksort.profile 50000 
  105. ./huffman_priority_queue.profile 100 
  106. ./huffman_priority_queue.profile 1000 
  107. ./huffman_priority_queue.profile 10000 
  108. ./huffman_priority_queue.profile 100000 
  109. ./huffman_priority_queue.profile 1000000 
  110. ./huffman_priority_queue.profile 100 
  111. ./huffman_priority_queue.profile 1000000 
  112. ./huffman.profile 100 
  113. ./huffman.profile 1000 
  114. ./huffman.profile 10000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.4e+09/1.35425e+09 create_huffman_codes
  2. 3.5e+03/1.35425e+09 free_huffman_codes
  3. 4.3e+02/1.35425e+09 main
  4.     3/1.35425e+09 inttobits

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 6.06527% 3685541304/6.07646e+10	create_huffman_codes() - if.end.i109
  2. 5.88322% 3574919255/6.07646e+10	create_huffman_codes() - do.body.i.i
  3. 5.02559% 3053779819/6.07646e+10	create_huffman_codes() - while.cond.backedge.i.i.for.inc_crit_edge
  4. 4.97523% 3023181816/6.07646e+10	create_huffman_codes() - for.body
  5. 4.72571% 2871558754/6.07646e+10	create_huffman_codes() - for.inc.for.body_crit_edge
  6. 4.62636% 2811191439/6.07646e+10	create_huffman_codes() - for.inc
  7. 4.61399% 2803673544/6.07646e+10	main() - while.body.while.body_crit_edge
  8. 4.09623% 2489060229/6.07646e+10	create_huffman_codes() - for.inc.while.cond_crit_edge
  9. 4.06018% 2467153475/6.07646e+10	create_huffman_codes() - while.cond.backedge.i.i
 10. 3.99704% 2428785847/6.07646e+10	inttobits() - while.end
 11. 2.8334% 1721705348/6.07646e+10	main() - if.end.for.end_crit_edge
 12. 2.8334% 1721705202/6.07646e+10	main() - for.body.i
 13. 2.47346% 1502988480/6.07646e+10	main() - for.end
 14. 2.37143% 1440992868/6.07646e+10	create_huffman_codes() - while.body.lr.ph.i.i
 15. 2.22867% 1354244345/6.07646e+10	create_huffman_codes() - entry
 16. 2.08278% 1265595052/6.07646e+10	create_huffman_codes() - while.body.i.i
 17. 2.01239% 1222820221/6.07646e+10	main() - for.body
 18. 2.00111% 1215967000/6.07646e+10	create_huffman_codes() - for.body.for.inc_crit_edge
 19. 1.93881% 1178113329/6.07646e+10	create_huffman_codes() - entry.cleanup_crit_edge
 20. 1.72001% 1045158807/6.07646e+10	main() - for.body10
WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 
  86. ./fft.profile 8192 
  87. ./factor.profile 4000000 
  88. ./factor.profile 5000000 
  89. ./factor.profile 6000000 
  90. ./factor.profile 2000000 
  91. ./factor.profile 6000000 
  92. ./fft.profile 128 
  93. ./bubble.profile 50000 
  94. ./bubble.profile 100000 
  95. ./bubble.profile 150000 
  96. ./bubble.profile 200000 
  97. ./bubble.profile 250000 
  98. ./bubble.profile 50000 
  99. ./fft.profile 8192 
  100. ./bubble.profile 250000 
  101. ./quicksort.profile 50000 
  102. ./quicksort.profile 100000 
  103. ./quicksort.profile 150000 
  104. ./quicksort.profile 50000 
  105. ./huffman_priority_queue.profile 100 
  106. ./huffman_priority_queue.profile 1000 
  107. ./huffman_priority_queue.profile 10000 
  108. ./huffman_priority_queue.profile 100000 
  109. ./huffman_priority_queue.profile 1000000 
  110. ./huffman_priority_queue.profile 100 
  111. ./huffman_priority_queue.profile 1000000 
  112. ./huffman.profile 100 
  113. ./huffman.profile 1000 
  114. ./huffman.profile 10000 
  115. ./huffman.profile 100000 
  116. ./kmeans.profile 10000 10 
  117. ./kmeans.profile 100000 10 
  118. ./kmeans.profile 1000000 10 
  119. ./kmeans.profile 1000000 20 
  120. ./kmeans.profile 1000000 50 
  121. ./huffman.profile 1000000 
  122. ./kmeans.profile 10000 10 
  123. ./kmeans.profile 1000000 50 
  124. ./permutations.profile 8 
  125. ./permutations.profile 9 
  126. ./permutations.profile 10 
  127. ./permutations.profile 11 
  128. ./permutations.profile 12 
  129. ./permutations.profile 8 
  130. ./permutations.profile 12 
  131. ./mandlebrot_seq.profile 1000 
  132. ./mandlebrot_seq.profile 1250 
  133. ./huffman.profile 100 
  134. ./mandlebrot_seq.profile 1500 
  135. ./mandlebrot_seq.profile 1750 
  136. ./mandlebrot_seq.profile 2000 
  137. ./mandlebrot_seq.profile 2250 
  138. ./mandlebrot_seq.profile 1000 
  139. ./huffman.profile 1000000 
  140. ./mandlebrot_seq.profile 2250 
  141. ./combinations.profile 13 
  142. ./combinations.profile 14 
  143. ./combinations.profile 15 
  144. ./combinations.profile 16 
  145. ./fft.profile 128 
  146. ./fft.profile 256 
  147. ./fft.profile 1024 
  148. ./fft.profile 4096 
  149. ./combinations.profile 17 
  150. ./fft.profile 8192 
  151. ./combinations.profile 13 
  152. ./combinations.profile 17 
  153. ./fft.profile 128 
  154. ./cholesky.profile 65536 
  155. ./cholesky.profile 262144 
  156. ./cholesky.profile 524288 
  157. ./cholesky.profile 786432 
  158. ./fft.profile 8192 
  159. ./cholesky.profile 1310720 
  160. ./cholesky.profile 65536 
  161. ./huffman_priority_queue.profile 100 
  162. ./huffman_priority_queue.profile 1000 
  163. ./huffman_priority_queue.profile 10000 
  164. ./huffman_priority_queue.profile 100000 
  165. ./huffman_priority_queue.profile 1000000 
  166. ./huffman_priority_queue.profile 100 
  167. ./huffman_priority_queue.profile 1000000 
  168. ./huffman.profile 100 
  169. ./huffman.profile 1000 
  170. ./huffman.profile 10000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 4.9e+08/4.89786e+08 create_huffman_codes
  2. 1.1e+04/4.89786e+08 free_huffman_codes
  3. 8.7e+02/4.89786e+08 main
  4.    10/4.89786e+08 inttobits

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 5.83362% 5923066257/1.01533e+11	create_huffman_codes() - for.inc
  2. 5.31546% 5396958814/1.01533e+11	create_huffman_codes() - for.body
  3. 4.78362% 4856966064/1.01533e+11	create_huffman_codes() - if.end.i
  4. 3.83551% 3894321390/1.01533e+11	free_huffman_codes() - for.body
  5. 3.54802% 3602422159/1.01533e+11	create_huffman_codes() - do.body.i.i
  6. 3.39141% 3443410696/1.01533e+11	main() - if.end.for.end_crit_edge
  7. 3.39141% 3443410404/1.01533e+11	main() - for.body.i
  8. 3.00766% 3053779826/1.01533e+11	create_huffman_codes() - while.cond.backedge.i.i.for.inc_crit_edge
  9. 2.97544% 3021063326/1.01533e+11	create_huffman_codes() - if.end.i109
 10. 2.96058% 3005976960/1.01533e+11	main() - for.end
 11. 2.82819% 2871559874/1.01533e+11	create_huffman_codes() - for.inc.for.body_crit_edge
 12. 2.45244% 2490048081/1.01533e+11	create_huffman_codes() - while.cond.backedge.i.i
 13. 2.4516% 2489193382/1.01533e+11	create_huffman_codes() - for.inc.while.cond_crit_edge
 14. 2.4221% 2459242104/1.01533e+11	create_huffman_codes() - if.then.i
 15. 2.41005% 2447007280/1.01533e+11	create_huffman_codes() - for.body.for.inc_crit_edge
 16. 2.40871% 2445640442/1.01533e+11	main() - for.body
 17. 2.39184% 2428514701/1.01533e+11	create_huffman_codes() - entry.for.body_crit_edge
 18. 2.32064% 2356226650/1.01533e+11	create_huffman_codes() - entry.cleanup_crit_edge
 19. 2.05875% 2090317614/1.01533e+11	main() - for.body10
 20. 1.97392% 2004189972/1.01533e+11	create_huffman_codes() - while.cond.backedge.i.i126
