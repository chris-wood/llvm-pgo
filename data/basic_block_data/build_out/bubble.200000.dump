WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.1e+07/1.09407e+07 main
  2.     8/1.09407e+07 bubbleSort

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 18.2167% 3539960624/1.94325e+10	bubbleSort() - for.end16
  2. 18.215% 3539622504/1.94325e+10	bubbleSort() - for.cond1.outer
  3. 17.7349% 3446337116/1.94325e+10	main() - for.body
  4. 16.4448% 3195629601/1.94325e+10	main() - bubbleSort.exit
  5. 9.16071% 1780154425/1.94325e+10	main() - for.end.for.cond1.preheader.i_crit_edge
  6. 8.04838% 1564001196/1.94325e+10	main() - for.body.for.body_crit_edge
  7. 4.74426% 921927683/1.94325e+10	main() - for.end.bubbleSort.exit_crit_edge
  8. 3.78894% 736284706/1.94325e+10	bubbleSort() - for.end.for.end16_crit_edge
  9. 1.11633% 216930522/1.94325e+10	bubbleSort() - for.cond1.preheader
 10. 1.11371% 216421435/1.94325e+10	bubbleSort() - for.end.for.cond1.preheader_crit_edge
 11. 0.288106% 55986113/1.94325e+10	main() - for.cond1.outer.i
 12. 0.160951% 31276770/1.94325e+10	bubbleSort() - for.body3.for.cond1_crit_edge
 13. 0.144159% 28013672/1.94325e+10	main() - for.cond1.preheader.i
 14. 0.144089% 28000009/1.94325e+10	bubbleSort() - for.cond1
 15. 0.144088% 27999986/1.94325e+10	main() - for.body3.i
 16. 0.144088% 27999986/1.94325e+10	main() - for.end.i.for.cond1.preheader.i_crit_edge
 17. 0.144088% 27999813/1.94325e+10	main() - for.body3.i.for.cond1.i_crit_edge
 18. 0.072852% 14156956/1.94325e+10	main() - entry.bubbleSort.exit_crit_edge
 19. 0.0589137% 11448399/1.94325e+10	main() - entry.for.body_crit_edge
 20. 0.0563013% 10940741/1.94325e+10	main() - entry
WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 
  86. ./fft.profile 8192 
  87. ./factor.profile 4000000 
  88. ./factor.profile 5000000 
  89. ./factor.profile 6000000 
  90. ./factor.profile 2000000 
  91. ./factor.profile 6000000 
  92. ./fft.profile 128 
  93. ./bubble.profile 50000 
  94. ./bubble.profile 100000 
  95. ./bubble.profile 150000 
  96. ./bubble.profile 200000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.2e+09/1.2454e+09 bubbleSort
  2. 2.2e+07/1.2454e+09 main

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 11.4755% 2375616975/2.07016e+10	bubbleSort() - for.end16
  2. 9.68335% 2004604446/2.07016e+10	bubbleSort() - for.cond1.preheader
  3. 9.288% 1922761424/2.07016e+10	main() - for.body
  4. 8.90949% 1844403169/2.07016e+10	main() - for.end.bubbleSort.exit_crit_edge
  5. 7.47711% 1547878451/2.07016e+10	main() - bubbleSort.exit
  6. 7.17581% 1485505257/2.07016e+10	bubbleSort() - for.cond1.outer
  7. 7.10986% 1471852192/2.07016e+10	bubbleSort() - for.end.for.end16_crit_edge
  8. 6.36891% 1318464186/2.07016e+10	bubbleSort() - for.cond1
  9. 5.90859% 1223170341/2.07016e+10	bubbleSort() - entry
 10. 5.37437% 1112578325/2.07016e+10	bubbleSort() - entry.for.cond1.preheader_crit_edge
 11. 5.1612% 1068449594/2.07016e+10	main() - for.end.for.cond1.preheader.i_crit_edge
 12. 4.36112% 902820219/2.07016e+10	main() - for.cond1.preheader.i
 13. 3.08874% 639417227/2.07016e+10	bubbleSort() - for.body3
 14. 3.07292% 636143149/2.07016e+10	main() - for.body.for.body_crit_edge
 15. 2.09208% 433093458/2.07016e+10	bubbleSort() - for.end.for.cond1.preheader_crit_edge
 16. 0.884405% 183085620/2.07016e+10	main() - for.body3.i.for.cond1.i_crit_edge
 17. 0.56079% 116092232/2.07016e+10	main() - for.cond1.outer.i
 18. 0.534221% 110592016/2.07016e+10	bubbleSort() - entry.for.end16_crit_edge
 19. 0.409201% 84710913/2.07016e+10	bubbleSort() - for.body3.for.cond1_crit_edge
 20. 0.270511% 55999978/2.07016e+10	main() - for.body3.i
