===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 3.6e+09/3.89083e+09 perm1
  2. 3e+08/3.89083e+09 boothroyd
  3. 4e+06/3.89083e+09 show
  4. 1.4e+06/3.89083e+09 perm3
  5. 9.2e+03/3.89083e+09 next_lex_perm
  6.    10/3.89083e+09 perm2
  7.     7/3.89083e+09 main

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 22.6927% 7066358900/3.11394e+10	next_lex_perm() - for.body21
  2. 11.5072% 3583262465/3.11394e+10	perm1() - entry
  3. 10.8527% 3379464630/3.11394e+10	next_lex_perm() - return
  4. 8.7616% 2728309083/3.11394e+10	boothroyd() - if.end.us
  5. 8.23459% 2564200119/3.11394e+10	perm1() - for.end13.i.us.for.cond.i.us_crit_edge
  6. 7.91325% 2464136160/3.11394e+10	next_lex_perm() - for.body21.for.body21_crit_edge
  7. 6.43725% 2004518987/3.11394e+10	next_lex_perm() - for.cond6
  8. 4.05583% 1262959336/3.11394e+10	next_lex_perm() - for.cond6.for.cond6_crit_edge
  9. 4.05309% 1262106422/3.11394e+10	next_lex_perm() - for.cond
 10. 2.96241% 922475480/3.11394e+10	perm1() - entry.for.cond.i.us_crit_edge
 11. 2.37184% 738576244/3.11394e+10	next_lex_perm() - for.end13
 12. 1.94018% 604159574/3.11394e+10	boothroyd() - if.end.us32
 13. 0.97009% 302080003/3.11394e+10	boothroyd() - if.then11.us
 14. 0.97009% 302080003/3.11394e+10	boothroyd() - if.end.us.if.then3_crit_edge
 15. 0.97009% 302080000/3.11394e+10	boothroyd() - if.end4.us.if.end.us_crit_edge
 16. 0.970088% 302079573/3.11394e+10	boothroyd() - entry
 17. 0.601167% 187199792/3.11394e+10	perm1() - for.cond6.i.us
 18. 0.507319% 157976098/3.11394e+10	perm1() - for.end13.i.us.for.body21.i.us_crit_edge
 19. 0.507275% 157962453/3.11394e+10	perm1() - for.cond.i.us
 20. 0.498018% 155079813/3.11394e+10	perm1() - land.rhs.i.us.for.cond.i.us_crit_edge
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 
  86. ./fft.profile 8192 
  87. ./factor.profile 4000000 
  88. ./factor.profile 5000000 
  89. ./factor.profile 6000000 
  90. ./factor.profile 2000000 
  91. ./factor.profile 6000000 
  92. ./fft.profile 128 
  93. ./bubble.profile 50000 
  94. ./bubble.profile 100000 
  95. ./bubble.profile 150000 
  96. ./bubble.profile 200000 
  97. ./bubble.profile 250000 
  98. ./bubble.profile 50000 
  99. ./fft.profile 8192 
  100. ./bubble.profile 250000 
  101. ./quicksort.profile 50000 
  102. ./quicksort.profile 100000 
  103. ./quicksort.profile 150000 
  104. ./quicksort.profile 50000 
  105. ./huffman_priority_queue.profile 100 
  106. ./huffman_priority_queue.profile 1000 
  107. ./huffman_priority_queue.profile 10000 
  108. ./huffman_priority_queue.profile 100000 
  109. ./huffman_priority_queue.profile 1000000 
  110. ./huffman_priority_queue.profile 100 
  111. ./huffman_priority_queue.profile 1000000 
  112. ./huffman.profile 100 
  113. ./huffman.profile 1000 
  114. ./huffman.profile 10000 
  115. ./huffman.profile 100000 
  116. ./kmeans.profile 10000 10 
  117. ./kmeans.profile 100000 10 
  118. ./kmeans.profile 1000000 10 
  119. ./kmeans.profile 1000000 20 
  120. ./kmeans.profile 1000000 50 
  121. ./huffman.profile 1000000 
  122. ./kmeans.profile 10000 10 
  123. ./kmeans.profile 1000000 50 
  124. ./permutations.profile 8 
  125. ./permutations.profile 9 
  126. ./permutations.profile 10 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 2.9e+09/5.37266e+09 perm1
  2. 1.4e+09/5.37266e+09 show
  3. 6.1e+08/5.37266e+09 boothroyd
  4. 3.6e+08/5.37266e+09 perm3
  5. 1.8e+08/5.37266e+09 next_lex_perm
  6.    24/5.37266e+09 perm2
  7.    14/5.37266e+09 main

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 8.75068% 5542878208/6.33423e+10	next_lex_perm() - for.body21
  2. 6.32977% 4009418709/6.33423e+10	next_lex_perm() - for.cond6
  3. 4.5334% 2871558754/6.33423e+10	perm1() - entry
  4. 4.42623% 2803673544/6.33423e+10	perm3() - while.end9
  5. 4.19521% 2657339868/6.33423e+10	next_lex_perm() - for.cond
  6. 3.94736% 2500346360/6.33423e+10	boothroyd() - if.end
  7. 3.89012% 2464091971/6.33423e+10	next_lex_perm() - return
  8. 2.91282% 1845046471/6.33423e+10	perm1() - entry.for.cond.i.us_crit_edge
  9. 2.72904% 1728633610/6.33423e+10	perm2() - entry.if.end_crit_edge
 10. 2.72904% 1728633297/6.33423e+10	perm2() - if.end
 11. 2.45078% 1552376767/6.33423e+10	perm3() - while.cond
 12. 2.32597% 1473322191/6.33423e+10	next_lex_perm() - for.end13
 13. 2.14435% 1358278342/6.33423e+10	show() - entry
 14. 1.99469% 1263483633/6.33423e+10	next_lex_perm() - for.cond6.for.cond6_crit_edge
 15. 1.90761% 1208324156/6.33423e+10	boothroyd() - if.end.us32
 16. 1.86941% 1184125342/6.33423e+10	show() - for.end
 17. 1.86628% 1182145326/6.33423e+10	show() - for.body.lr.ph
 18. 1.83393% 1161650874/6.33423e+10	boothroyd() - if.end.us
 19. 1.66153% 1052450217/6.33423e+10	perm1() - for.end13.i.us.for.cond.i.us_crit_edge
 20. 1.63204% 1033768307/6.33423e+10	perm1() - for.cond.i.us
