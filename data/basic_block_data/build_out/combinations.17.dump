WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 
  86. ./fft.profile 8192 
  87. ./factor.profile 4000000 
  88. ./factor.profile 5000000 
  89. ./factor.profile 6000000 
  90. ./factor.profile 2000000 
  91. ./factor.profile 6000000 
  92. ./fft.profile 128 
  93. ./bubble.profile 50000 
  94. ./bubble.profile 100000 
  95. ./bubble.profile 150000 
  96. ./bubble.profile 200000 
  97. ./bubble.profile 250000 
  98. ./bubble.profile 50000 
  99. ./fft.profile 8192 
  100. ./bubble.profile 250000 
  101. ./quicksort.profile 50000 
  102. ./quicksort.profile 100000 
  103. ./quicksort.profile 150000 
  104. ./quicksort.profile 50000 
  105. ./huffman_priority_queue.profile 100 
  106. ./huffman_priority_queue.profile 1000 
  107. ./huffman_priority_queue.profile 10000 
  108. ./huffman_priority_queue.profile 100000 
  109. ./huffman_priority_queue.profile 1000000 
  110. ./huffman_priority_queue.profile 100 
  111. ./huffman_priority_queue.profile 1000000 
  112. ./huffman.profile 100 
  113. ./huffman.profile 1000 
  114. ./huffman.profile 10000 
  115. ./huffman.profile 100000 
  116. ./kmeans.profile 10000 10 
  117. ./kmeans.profile 100000 10 
  118. ./kmeans.profile 1000000 10 
  119. ./kmeans.profile 1000000 20 
  120. ./kmeans.profile 1000000 50 
  121. ./huffman.profile 1000000 
  122. ./kmeans.profile 10000 10 
  123. ./kmeans.profile 1000000 50 
  124. ./permutations.profile 8 
  125. ./permutations.profile 9 
  126. ./permutations.profile 10 
  127. ./permutations.profile 11 
  128. ./permutations.profile 12 
  129. ./permutations.profile 8 
  130. ./permutations.profile 12 
  131. ./mandlebrot_seq.profile 1000 
  132. ./mandlebrot_seq.profile 1250 
  133. ./huffman.profile 100 
  134. ./mandlebrot_seq.profile 1500 
  135. ./mandlebrot_seq.profile 1750 
  136. ./mandlebrot_seq.profile 2000 
  137. ./mandlebrot_seq.profile 2250 
  138. ./mandlebrot_seq.profile 1000 
  139. ./huffman.profile 1000000 
  140. ./mandlebrot_seq.profile 2250 
  141. ./combinations.profile 13 
  142. ./combinations.profile 14 
  143. ./combinations.profile 15 
  144. ./combinations.profile 16 
  145. ./fft.profile 128 
  146. ./fft.profile 256 
  147. ./fft.profile 1024 
  148. ./fft.profile 4096 
  149. ./combinations.profile 17 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 4.3e+09/6.69112e+09 comb
  2. 2.4e+09/6.69112e+09 main

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 8.58418% 4277743780/4.98329e+10	comb() - return
  2. 8.53224% 4251861385/4.98329e+10	comb() - entry
  3. 8.4426% 4207191691/4.98329e+10	comb() - for.body.for.inc_crit_edge
  4. 8.40368% 4187797125/4.98329e+10	comb() - if.then4
  5. 7.45716% 3716117359/4.98329e+10	comb() - for.inc
  6. 7.17424% 3575131255/4.98329e+10	comb() - for.inc.for.body_crit_edge
  7. 6.74385% 3360654722/4.98329e+10	comb() - if.end.lr.ph.if.end7_crit_edge
  8. 6.63754% 3307678374/4.98329e+10	comb() - for.body
  9. 6.12804% 3053779826/4.98329e+10	comb() - if.end7.if.end7_crit_edge
 10. 5.949% 2964558693/4.98329e+10	comb() - for.cond.preheader.split
 11. 5.42956% 2705704695/4.98329e+10	comb() - for.cond.preheader.split.return_crit_edge
 12. 4.89488% 2439258201/4.98329e+10	main() - entry
 13. 4.46318% 2224133650/4.98329e+10	comb() - entry.return_crit_edge
 14. 4.30193% 2143776024/4.98329e+10	comb() - if.end7
 15. 4.06905% 2027727735/4.98329e+10	comb() - if.end.lr.ph
 16. 2.53552% 1263521638/4.98329e+10	comb() - for.inc.return_crit_edge
 17. 0.203528% 101423879/4.98329e+10	comb() - for.body.lr.ph
 18. 0.0498313% 24832390/4.98329e+10	comb() - if.end7.return_crit_edge
WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 
  86. ./fft.profile 8192 
  87. ./factor.profile 4000000 
  88. ./factor.profile 5000000 
  89. ./factor.profile 6000000 
  90. ./factor.profile 2000000 
  91. ./factor.profile 6000000 
  92. ./fft.profile 128 
  93. ./bubble.profile 50000 
  94. ./bubble.profile 100000 
  95. ./bubble.profile 150000 
  96. ./bubble.profile 200000 
  97. ./bubble.profile 250000 
  98. ./bubble.profile 50000 
  99. ./fft.profile 8192 
  100. ./bubble.profile 250000 
  101. ./quicksort.profile 50000 
  102. ./quicksort.profile 100000 
  103. ./quicksort.profile 150000 
  104. ./quicksort.profile 50000 
  105. ./huffman_priority_queue.profile 100 
  106. ./huffman_priority_queue.profile 1000 
  107. ./huffman_priority_queue.profile 10000 
  108. ./huffman_priority_queue.profile 100000 
  109. ./huffman_priority_queue.profile 1000000 
  110. ./huffman_priority_queue.profile 100 
  111. ./huffman_priority_queue.profile 1000000 
  112. ./huffman.profile 100 
  113. ./huffman.profile 1000 
  114. ./huffman.profile 10000 
  115. ./huffman.profile 100000 
  116. ./kmeans.profile 10000 10 
  117. ./kmeans.profile 100000 10 
  118. ./kmeans.profile 1000000 10 
  119. ./kmeans.profile 1000000 20 
  120. ./kmeans.profile 1000000 50 
  121. ./huffman.profile 1000000 
  122. ./kmeans.profile 10000 10 
  123. ./kmeans.profile 1000000 50 
  124. ./permutations.profile 8 
  125. ./permutations.profile 9 
  126. ./permutations.profile 10 
  127. ./permutations.profile 11 
  128. ./permutations.profile 12 
  129. ./permutations.profile 8 
  130. ./permutations.profile 12 
  131. ./mandlebrot_seq.profile 1000 
  132. ./mandlebrot_seq.profile 1250 
  133. ./huffman.profile 100 
  134. ./mandlebrot_seq.profile 1500 
  135. ./mandlebrot_seq.profile 1750 
  136. ./mandlebrot_seq.profile 2000 
  137. ./mandlebrot_seq.profile 2250 
  138. ./mandlebrot_seq.profile 1000 
  139. ./huffman.profile 1000000 
  140. ./mandlebrot_seq.profile 2250 
  141. ./combinations.profile 13 
  142. ./combinations.profile 14 
  143. ./combinations.profile 15 
  144. ./combinations.profile 16 
  145. ./fft.profile 128 
  146. ./fft.profile 256 
  147. ./fft.profile 1024 
  148. ./fft.profile 4096 
  149. ./combinations.profile 17 
  150. ./fft.profile 8192 
  151. ./combinations.profile 13 
  152. ./combinations.profile 17 
  153. ./fft.profile 128 
  154. ./cholesky.profile 65536 
  155. ./cholesky.profile 262144 
  156. ./cholesky.profile 524288 
  157. ./cholesky.profile 786432 
  158. ./fft.profile 8192 
  159. ./cholesky.profile 1310720 
  160. ./cholesky.profile 65536 
  161. ./huffman_priority_queue.profile 100 
  162. ./huffman_priority_queue.profile 1000 
  163. ./huffman_priority_queue.profile 10000 
  164. ./huffman_priority_queue.profile 100000 
  165. ./huffman_priority_queue.profile 1000000 
  166. ./huffman_priority_queue.profile 100 
  167. ./huffman_priority_queue.profile 1000000 
  168. ./huffman.profile 100 
  169. ./huffman.profile 1000 
  170. ./huffman.profile 10000 
  171. ./huffman.profile 100000 
  172. ./huffman.profile 1000000 
  173. ./huffman.profile 100 
  174. ./huffman.profile 1000000 
  175. ./combinations.profile 13 
  176. ./combinations.profile 14 
  177. ./combinations.profile 15 
  178. ./combinations.profile 16 
  179. ./combinations.profile 17 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 2.4e+09/4.7366e+09 main
  2. 2.3e+09/4.7366e+09 comb

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 9.88034% 4236079420/4.28738e+10	comb() - if.end.lr.ph
  2. 9.66485% 4143692079/4.28738e+10	comb() - for.cond.preheader.split.return_crit_edge
  3. 8.973% 3847069212/4.28738e+10	comb() - for.cond.preheader.split
  4. 8.84596% 3792603965/4.28738e+10	comb() - return
  5. 8.40287% 3602634159/4.28738e+10	comb() - for.inc.for.body_crit_edge
  6. 7.18525% 3080592304/4.28738e+10	comb() - if.end7
  7. 7.12271% 3053779826/4.28738e+10	comb() - if.end7.if.end7_crit_edge
  8. 6.29931% 2700755863/4.28738e+10	comb() - if.then4
  9. 5.6894% 2439265204/4.28738e+10	main() - entry
 10. 5.49572% 2356226650/4.28738e+10	comb() - entry.return_crit_edge
 11. 5.35837% 2297338774/4.28738e+10	comb() - entry
 12. 3.59777% 1542501925/4.28738e+10	comb() - for.inc
 13. 3.51073% 1505186014/4.28738e+10	comb() - for.body
 14. 3.36798% 1443980325/4.28738e+10	comb() - for.body.lr.ph
 15. 2.9966% 1284757237/4.28738e+10	comb() - for.inc.return_crit_edge
 16. 2.63352% 1129091153/4.28738e+10	comb() - for.body.for.inc_crit_edge
 17. 0.917367% 393310592/4.28738e+10	comb() - if.end.lr.ph.if.end7_crit_edge
 18. 0.0582462% 24972390/4.28738e+10	comb() - if.end7.return_crit_edge
