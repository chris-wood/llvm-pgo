WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 
  86. ./fft.profile 8192 
  87. ./factor.profile 4000000 
  88. ./factor.profile 5000000 
  89. ./factor.profile 6000000 
  90. ./factor.profile 2000000 
  91. ./factor.profile 6000000 
  92. ./fft.profile 128 
  93. ./bubble.profile 50000 
  94. ./bubble.profile 100000 
  95. ./bubble.profile 150000 
  96. ./bubble.profile 200000 
  97. ./bubble.profile 250000 
  98. ./bubble.profile 50000 
  99. ./fft.profile 8192 
  100. ./bubble.profile 250000 
  101. ./quicksort.profile 50000 
  102. ./quicksort.profile 100000 
  103. ./quicksort.profile 150000 
  104. ./quicksort.profile 50000 
  105. ./huffman_priority_queue.profile 100 
  106. ./huffman_priority_queue.profile 1000 
  107. ./huffman_priority_queue.profile 10000 
  108. ./huffman_priority_queue.profile 100000 
  109. ./huffman_priority_queue.profile 1000000 
  110. ./huffman_priority_queue.profile 100 
  111. ./huffman_priority_queue.profile 1000000 
  112. ./huffman.profile 100 
  113. ./huffman.profile 1000 
  114. ./huffman.profile 10000 
  115. ./huffman.profile 100000 
  116. ./kmeans.profile 10000 10 
  117. ./kmeans.profile 100000 10 
  118. ./kmeans.profile 1000000 10 
  119. ./kmeans.profile 1000000 20 
  120. ./kmeans.profile 1000000 50 
  121. ./huffman.profile 1000000 
  122. ./kmeans.profile 10000 10 
  123. ./kmeans.profile 1000000 50 
  124. ./permutations.profile 8 
  125. ./permutations.profile 9 
  126. ./permutations.profile 10 
  127. ./permutations.profile 11 
  128. ./permutations.profile 12 
  129. ./permutations.profile 8 
  130. ./permutations.profile 12 
  131. ./mandlebrot_seq.profile 1000 
  132. ./mandlebrot_seq.profile 1250 
  133. ./huffman.profile 100 
  134. ./mandlebrot_seq.profile 1500 
  135. ./mandlebrot_seq.profile 1750 
  136. ./mandlebrot_seq.profile 2000 
  137. ./mandlebrot_seq.profile 2250 
  138. ./mandlebrot_seq.profile 1000 
  139. ./huffman.profile 1000000 
  140. ./mandlebrot_seq.profile 2250 
  141. ./combinations.profile 13 
  142. ./combinations.profile 14 
  143. ./combinations.profile 15 
  144. ./combinations.profile 16 
  145. ./fft.profile 128 
  146. ./fft.profile 256 
  147. ./fft.profile 1024 
  148. ./fft.profile 4096 
  149. ./combinations.profile 17 
  150. ./fft.profile 8192 
  151. ./combinations.profile 13 
  152. ./combinations.profile 17 
  153. ./fft.profile 128 
  154. ./cholesky.profile 65536 
  155. ./cholesky.profile 262144 
  156. ./cholesky.profile 524288 
  157. ./cholesky.profile 786432 
  158. ./fft.profile 8192 
  159. ./cholesky.profile 1310720 
  160. ./cholesky.profile 65536 
  161. ./huffman_priority_queue.profile 100 
  162. ./huffman_priority_queue.profile 1000 
  163. ./huffman_priority_queue.profile 10000 
  164. ./huffman_priority_queue.profile 100000 
  165. ./huffman_priority_queue.profile 1000000 
  166. ./huffman_priority_queue.profile 100 
  167. ./huffman_priority_queue.profile 1000000 
  168. ./huffman.profile 100 
  169. ./huffman.profile 1000 
  170. ./huffman.profile 10000 
  171. ./huffman.profile 100000 
  172. ./huffman.profile 1000000 
  173. ./huffman.profile 100 
  174. ./huffman.profile 1000000 
  175. ./combinations.profile 13 
  176. ./combinations.profile 14 
  177. ./combinations.profile 15 
  178. ./combinations.profile 16 
  179. ./combinations.profile 17 
  180. ./combinations.profile 13 
  181. ./cholesky.profile 1310720 
  182. ./combinations.profile 17 
  183. ./cholesky.profile 65536 
  184. ./cholesky.profile 262144 
  185. ./deconvolution.profile 256 
  186. ./cholesky.profile 524288 
  187. ./deconvolution.profile 512 
  188. ./deconvolution.profile 1024 
  189. ./deconvolution.profile 2048 
  190. ./deconvolution.profile 256 
  191. ./deconvolution.profile 2048 
  192. ./euler_method.profile 16384 
  193. ./euler_method.profile 32768 
  194. ./euler_method.profile 65536 
  195. ./euler_method.profile 98304 
  196. ./euler_method.profile 131072 
  197. ./euler_method.profile 16384 
  198. ./euler_method.profile 131072 
  199. ./lucas.profile 75000 
  200. ./lucas.profile 100000 
  201. ./lucas.profile 125000 
  202. ./lucas.profile 150000 
  203. ./lucas.profile 175000 
  204. ./lucas.profile 75000 
  205. ./cholesky.profile 786432 
  206. ./lucas.profile 175000 
  207. ./aes.profile 250000 
  208. ./aes.profile 500000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 2.6e+09/6.51848e+09 getSBoxValue
  2. 2.4e+09/6.51848e+09 KeyExpansion
  3. 1.1e+09/6.51848e+09 SubBytes
  4. 2.5e+08/6.51848e+09 Cipher
  5. 1.1e+08/6.51848e+09 main
  6. 8.6e+07/6.51848e+09 ShiftRows
  7. 3.9e+07/6.51848e+09 MixColumns
  8. 3.1e+06/6.51848e+09 AddRoundKey

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 6.90287% 4708107423/6.82051e+10	KeyExpansion() - for.cond23.preheader.us
  2. 6.73603% 4594315143/6.82051e+10	KeyExpansion() - for.body
  3. 6.38924% 4357787696/6.82051e+10	KeyExpansion() - for.cond23.preheader
  4. 6.21773% 4240807277/6.82051e+10	KeyExpansion() - while.cond.preheader
  5. 5.73599% 3912233869/6.82051e+10	KeyExpansion() - if.else.us.if.end91.us_crit_edge
  6. 5.59095% 3813312713/6.82051e+10	KeyExpansion() - for.cond23.preheader.lr.ph
  7. 5.37706% 3667426239/6.82051e+10	KeyExpansion() - if.then70.us
  8. 5.13881% 3504926917/6.82051e+10	KeyExpansion() - for.cond23.preheader.lr.ph.for.cond23.preheader_crit_edge
  9. 4.47735% 3053779833/6.82051e+10	KeyExpansion() - if.end91.us.for.cond23.preheader.us_crit_edge
 10. 4.27902% 2918507339/6.82051e+10	KeyExpansion() - while.cond.preheader.while.end_crit_edge
 11. 4.22624% 2882509655/6.82051e+10	KeyExpansion() - for.cond.while.cond.preheader_crit_edge
 12. 3.77581% 2575295988/6.82051e+10	getSBoxValue() - entry
 13. 3.65109% 2490230384/6.82051e+10	KeyExpansion() - for.body.for.body_crit_edge
 14. 3.46258% 2361658378/6.82051e+10	KeyExpansion() - entry
 15. 2.56649% 1750474822/6.82051e+10	MixColumns() - for.end
 16. 1.94122% 1324013033/6.82051e+10	MixColumns() - for.body
 17. 1.92163% 1310651079/6.82051e+10	KeyExpansion() - if.then.us
 18. 1.86558% 1272423782/6.82051e+10	MixColumns() - for.body.for.body_crit_edge
 19. 1.84326% 1257195070/6.82051e+10	Cipher() - for.cond9
 20. 1.59227% 1086007670/6.82051e+10	SubBytes() - entry
