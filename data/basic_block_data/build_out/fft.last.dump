WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 
  86. ./fft.profile 8192 
  87. ./factor.profile 4000000 
  88. ./factor.profile 5000000 
  89. ./factor.profile 6000000 
  90. ./factor.profile 2000000 
  91. ./factor.profile 6000000 
  92. ./fft.profile 128 
  93. ./bubble.profile 50000 
  94. ./bubble.profile 100000 
  95. ./bubble.profile 150000 
  96. ./bubble.profile 200000 
  97. ./bubble.profile 250000 
  98. ./bubble.profile 50000 
  99. ./fft.profile 8192 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 3.7e+09/6.72109e+09 show
  2. 1.4e+09/6.72109e+09 fft
  3. 1.4e+09/6.72109e+09 _fft
  4. 1.8e+08/6.72109e+09 main

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 11.5452% 4045020152/3.50364e+10	show() - for.end
  2. 11.4093% 3997391768/3.50364e+10	show() - entry.for.end_crit_edge
  3. 10.6842% 3743342165/3.50364e+10	show() - entry
  4. 7.94043% 2782036729/3.50364e+10	main() - if.end6.for.body_crit_edge
  5. 7.07491% 2478791254/3.50364e+10	_fft() - if.end
  6. 5.79012% 2028647858/3.50364e+10	fft() - for.body
  7. 5.26511% 1844701992/3.50364e+10	show() - if.else
  8. 4.50887% 1579742761/3.50364e+10	fft() - for.end
  9. 4.20093% 1471852194/3.50364e+10	fft() - entry.for.end_crit_edge
 10. 4.11122% 1440422863/3.50364e+10	fft() - entry
 11. 3.86524% 1354241341/3.50364e+10	_fft() - entry
 12. 3.61397% 1266203413/3.50364e+10	_fft() - for.body
 13. 3.36254% 1178113325/3.50364e+10	_fft() - if.then
 14. 2.8945% 1014127164/3.50364e+10	main() - return
 15. 1.79264% 628076327/3.50364e+10	main() - for.body
 16. 1.79264% 628076153/3.50364e+10	main() - for.body14
 17. 1.58977% 556996264/3.50364e+10	main() - for.body.for.body14_crit_edge
 18. 1.42993% 500996306/3.50364e+10	main() - for.end17
 19. 1.42993% 500996174/3.50364e+10	main() - if.end6.for.body14_crit_edge
 20. 1.23613% 433093458/3.50364e+10	fft() - entry.for.body_crit_edge
WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 
  86. ./fft.profile 8192 
  87. ./factor.profile 4000000 
  88. ./factor.profile 5000000 
  89. ./factor.profile 6000000 
  90. ./factor.profile 2000000 
  91. ./factor.profile 6000000 
  92. ./fft.profile 128 
  93. ./bubble.profile 50000 
  94. ./bubble.profile 100000 
  95. ./bubble.profile 150000 
  96. ./bubble.profile 200000 
  97. ./bubble.profile 250000 
  98. ./bubble.profile 50000 
  99. ./fft.profile 8192 
  100. ./bubble.profile 250000 
  101. ./quicksort.profile 50000 
  102. ./quicksort.profile 100000 
  103. ./quicksort.profile 150000 
  104. ./quicksort.profile 50000 
  105. ./huffman_priority_queue.profile 100 
  106. ./huffman_priority_queue.profile 1000 
  107. ./huffman_priority_queue.profile 10000 
  108. ./huffman_priority_queue.profile 100000 
  109. ./huffman_priority_queue.profile 1000000 
  110. ./huffman_priority_queue.profile 100 
  111. ./huffman_priority_queue.profile 1000000 
  112. ./huffman.profile 100 
  113. ./huffman.profile 1000 
  114. ./huffman.profile 10000 
  115. ./huffman.profile 100000 
  116. ./kmeans.profile 10000 10 
  117. ./kmeans.profile 100000 10 
  118. ./kmeans.profile 1000000 10 
  119. ./kmeans.profile 1000000 20 
  120. ./kmeans.profile 1000000 50 
  121. ./huffman.profile 1000000 
  122. ./kmeans.profile 10000 10 
  123. ./kmeans.profile 1000000 50 
  124. ./permutations.profile 8 
  125. ./permutations.profile 9 
  126. ./permutations.profile 10 
  127. ./permutations.profile 11 
  128. ./permutations.profile 12 
  129. ./permutations.profile 8 
  130. ./permutations.profile 12 
  131. ./mandlebrot_seq.profile 1000 
  132. ./mandlebrot_seq.profile 1250 
  133. ./huffman.profile 100 
  134. ./mandlebrot_seq.profile 1500 
  135. ./mandlebrot_seq.profile 1750 
  136. ./mandlebrot_seq.profile 2000 
  137. ./mandlebrot_seq.profile 2250 
  138. ./mandlebrot_seq.profile 1000 
  139. ./huffman.profile 1000000 
  140. ./mandlebrot_seq.profile 2250 
  141. ./combinations.profile 13 
  142. ./combinations.profile 14 
  143. ./combinations.profile 15 
  144. ./combinations.profile 16 
  145. ./fft.profile 128 
  146. ./fft.profile 256 
  147. ./fft.profile 1024 
  148. ./fft.profile 4096 
  149. ./combinations.profile 17 
  150. ./fft.profile 8192 
  151. ./combinations.profile 13 
  152. ./combinations.profile 17 
  153. ./fft.profile 128 
  154. ./cholesky.profile 65536 
  155. ./cholesky.profile 262144 
  156. ./cholesky.profile 524288 
  157. ./cholesky.profile 786432 
  158. ./fft.profile 8192 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 4.3e+09/6.39507e+09 fft
  2. 9.9e+08/6.39507e+09 main
  3. 6.3e+08/6.39507e+09 show
  4. 4.9e+08/6.39507e+09 _fft

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 13.6257% 8550127961/6.27498e+10	_fft() - if.end
  2. 7.745% 4859972314/6.27498e+10	_fft() - for.body
  3. 6.89846% 4328770266/6.27498e+10	fft() - for.end
  4. 6.833% 4287691057/6.27498e+10	fft() - entry
  5. 5.76051% 3614709245/6.27498e+10	fft() - for.body
  6. 4.59222% 2881607224/6.27498e+10	show() - for.body
  7. 4.26755% 2677876638/6.27498e+10	fft() - entry.for.end_crit_edge
  8. 3.98095% 2498034798/6.27498e+10	show() - for.end
  9. 3.90377% 2449605312/6.27498e+10	_fft() - for.body.if.end_crit_edge
 10. 3.88728% 2439258204/6.27498e+10	show() - entry.for.end_crit_edge
 11. 3.86576% 2425759189/6.27498e+10	_fft() - entry.if.end_crit_edge
 12. 3.75496% 2356226650/6.27498e+10	_fft() - if.then
 13. 3.05403% 1916395840/6.27498e+10	main() - return
 14. 2.94038% 1845084478/6.27498e+10	show() - if.else
 15. 2.46226% 1545064046/6.27498e+10	_fft() - if.then.if.end_crit_edge
 16. 2.33935% 1467939611/6.27498e+10	_fft() - for.body.for.body_crit_edge
 17. 2.11493% 1327113773/6.27498e+10	fft() - entry.for.body_crit_edge
 18. 2.02512% 1270758820/6.27498e+10	main() - if.end6.for.body_crit_edge
 19. 2.00286% 1256789808/6.27498e+10	main() - for.body
 20. 2.00207% 1256294098/6.27498e+10	main() - for.body14
