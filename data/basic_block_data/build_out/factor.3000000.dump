===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 3.8e+07/3.75324e+07 factor
  2.     8/3.75324e+07 xferFactors

  NOTE: 1 function was never executed!

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 36.7218% 3550484108/9.66861e+09	xferFactors() - for.end
  2. 36.6129% 3539960442/9.66861e+09	factor() - entry.for.end_crit_edge
  3. 10.8831% 1052249053/9.66861e+09	factor() - if.end.i
  4. 10.5289% 1017993512/9.66861e+09	factor() - entry.for.body_crit_edge
  5. 3.16714% 306218118/9.66861e+09	factor() - for.inc
  6. 0.439998% 42541665/9.66861e+09	factor() - for.end
  7. 0.388188% 37532411/9.66861e+09	factor() - entry
  8. 0.385416% 37264378/9.66861e+09	factor() - if.else.i
  9. 0.164871% 15940733/9.66861e+09	factor() - for.body
 10. 0.14642% 14156786/9.66861e+09	factor() - if.end
 11. 0.113253% 10949993/9.66861e+09	factor() - for.body.for.inc_crit_edge
 12. 0.0856047% 8276780/9.66861e+09	xferFactors() - for.body.for.body_crit_edge
 13. 0.0518092% 5009227/9.66861e+09	xferFactors() - for.body
 14. 0.0517462% 5003140/9.66861e+09	factor() - xferFactors.exit
 15. 0.0517137% 4999998/9.66861e+09	factor() - if.end14
 16. 0.0517137% 4999996/9.66861e+09	factor() - for.end.if.end14_crit_edge
 17. 0.0517137% 4999994/9.66861e+09	factor() - if.then.i49
 18. 0.0517137% 4999993/9.66861e+09	factor() - for.inc.for.body_crit_edge
 19. 0.0516812% 4996852/9.66861e+09	factor() - if.end.i.xferFactors.exit_crit_edge
 20. 9.51843e-05%  9203/9.66861e+09	factor() - if.then4
WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 
  85. ./factor.profile 3000000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.1e+09/1.84525e+09 xferFactors
  2. 5e+08/1.84525e+09 main
  3. 2.5e+08/1.84525e+09 factor

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 10.2314% 3984711856/3.89458e+10	factor() - for.inc
  2. 9.40237% 3661829581/3.89458e+10	factor() - if.end14
  3. 9.29632% 3620526843/3.89458e+10	factor() - if.else.i
  4. 8.7095% 3391985342/3.89458e+10	factor() - if.then.i
  5. 8.65622% 3371234750/3.89458e+10	factor() - if.end5
  6. 6.32711% 2464145363/3.89458e+10	factor() - if.then4
  7. 5.14233% 2002724537/3.89458e+10	factor() - if.end.i
  8. 4.83027% 1881189084/3.89458e+10	xferFactors() - for.end
  9. 4.78096% 1861985391/3.89458e+10	factor() - for.end
 10. 4.50256% 1753560998/3.89458e+10	factor() - entry.for.body_crit_edge
 11. 3.24307% 1263038460/3.89458e+10	factor() - entry.for.end_crit_edge
 12. 2.89908% 1129072482/3.89458e+10	factor() - if.end18
 13. 2.79889% 1090052341/3.89458e+10	xferFactors() - entry
 14. 2.68673% 1046370345/3.89458e+10	xferFactors() - if.end
 15. 2.68583% 1046020325/3.89458e+10	xferFactors() - if.then
 16. 1.43642% 559425166/3.89458e+10	xferFactors() - for.body
 17. 1.37113% 533996279/3.89458e+10	factor() - if.then.i49
 18. 1.28639% 500996313/3.89458e+10	main() - entry
 19. 1.28639% 500996306/3.89458e+10	factor() - for.body.lr.ph.i57
 20. 1.28639% 500996306/3.89458e+10	factor() - if.end.i56
