===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.5e+07/1.49305e+07 factor
  2.     8/1.49305e+07 xferFactors

  NOTE: 1 function was never executed!

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 31.537% 3550484108/1.12581e+10	xferFactors() - for.end
  2. 31.4436% 3539960439/1.12581e+10	factor() - entry.for.end_crit_edge
  3. 16.74% 1884616671/1.12581e+10	factor() - if.end.i
  4. 16.6365% 1872963095/1.12581e+10	factor() - entry.for.body_crit_edge
  5. 2.71997% 306218112/1.12581e+10	factor() - for.inc
  6. 0.150466% 16939708/1.12581e+10	factor() - for.end
  7. 0.132619% 14930446/1.12581e+10	factor() - entry
  8. 0.130238% 14662413/1.12581e+10	factor() - if.else.i
  9. 0.125747% 14156783/1.12581e+10	factor() - if.end
 10. 0.114946% 12940735/1.12581e+10	factor() - for.body
 11. 0.0972629% 10949993/1.12581e+10	factor() - for.body.for.inc_crit_edge
 12. 0.0468708% 5276782/1.12581e+10	xferFactors() - for.body.for.body_crit_edge
 13. 0.0178469% 2009229/1.12581e+10	xferFactors() - for.body
 14. 0.0177775% 2001411/1.12581e+10	factor() - xferFactors.exit
 15. 0.0177649% 1999999/1.12581e+10	factor() - if.end14
 16. 0.0177649% 1999998/1.12581e+10	factor() - for.inc.for.body_crit_edge
 17. 0.0177649% 1999998/1.12581e+10	factor() - for.end.if.end14_crit_edge
 18. 0.0177649% 1999997/1.12581e+10	factor() - if.then.i49
 19. 0.0177524% 1998585/1.12581e+10	factor() - if.end.i.xferFactors.exit_crit_edge
 20. 8.17187e-05%  9200/1.12581e+10	factor() - if.then4
WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./is_prime.profile 131072 
  9. ./block_test.profile 5000 
  10. ./block_test.profile 7500 
  11. ./block_test.profile 10000 
  12. ./block_test.profile 12500 
  13. ./block_test.profile 15000 
  14. ./block_test.profile 5000 
  15. ./block_test.profile 15000 
  16. ./blocked.profile 900 
  17. ./blocked.profile 1000 
  18. ./blocked.profile 1100 
  19. ./blocked.profile 1200 
  20. ./blocked.profile 1300 
  21. ./blocked.profile 1400 
  22. ./blocked.profile 900 
  23. ./blocked.profile 1400 
  24. ./factor.profile 2000000 
  25. ./factor.profile 3000000 
  26. ./factor.profile 4000000 
  27. ./factor.profile 5000000 
  28. ./factor.profile 6000000 
  29. ./factor.profile 2000000 
  30. ./factor.profile 6000000 
  31. ./bubble.profile 50000 
  32. ./bubble.profile 100000 
  33. ./bubble.profile 150000 
  34. ./bubble.profile 200000 
  35. ./is_prime.profile 2097152 
  36. ./bubble.profile 250000 
  37. ./bubble.profile 50000 
  38. ./bubble.profile 250000 
  39. ./quicksort.profile 50000 
  40. ./quicksort.profile 100000 
  41. ./quicksort.profile 150000 
  42. ./quicksort.profile 50000 
  43. ./kmeans.profile 10000 10 
  44. ./kmeans.profile 100000 10 
  45. ./kmeans.profile 1000000 10 
  46. ./kmeans.profile 1000000 20 
  47. ./kmeans.profile 1000000 50 
  48. ./kmeans.profile 10000 10 
  49. ./kmeans.profile 1000000 50 
  50. ./permutations.profile 8 
  51. ./permutations.profile 9 
  52. ./permutations.profile 10 
  53. ./permutations.profile 11 
  54. ./permutations.profile 12 
  55. ./permutations.profile 8 
  56. ./permutations.profile 12 
  57. ./mandlebrot_seq.profile 1000 
  58. ./mandlebrot_seq.profile 1250 
  59. ./mandlebrot_seq.profile 1500 
  60. ./mandlebrot_seq.profile 1750 
  61. ./mandlebrot_seq.profile 2000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./mandlebrot_seq.profile 1000 
  64. ./block_test.profile 5000 
  65. ./block_test.profile 7500 
  66. ./block_test.profile 10000 
  67. ./block_test.profile 12500 
  68. ./block_test.profile 15000 
  69. ./block_test.profile 5000 
  70. ./block_test.profile 15000 
  71. ./blocked.profile 900 
  72. ./blocked.profile 1000 
  73. ./blocked.profile 1100 
  74. ./mandlebrot_seq.profile 2250 
  75. ./blocked.profile 1200 
  76. ./blocked.profile 1300 
  77. ./fft.profile 128 
  78. ./blocked.profile 1400 
  79. ./fft.profile 256 
  80. ./fft.profile 1024 
  81. ./blocked.profile 900 
  82. ./fft.profile 4096 
  83. ./blocked.profile 1400 
  84. ./factor.profile 2000000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.1e+09/1.82265e+09 xferFactors
  2. 5e+08/1.82265e+09 main
  3. 2.3e+08/1.82265e+09 factor

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 9.83021% 3984711850/4.05354e+10	factor() - for.inc
  2. 9.02627% 3658829582/4.05354e+10	factor() - if.end14
  3. 8.87602% 3597924878/4.05354e+10	factor() - if.else.i
  4. 8.36797% 3391985339/4.05354e+10	factor() - if.then.i
  5. 8.31678% 3371234747/4.05354e+10	factor() - if.end5
  6. 6.99412% 2835092155/4.05354e+10	factor() - if.end.i
  7. 6.4352% 2608530581/4.05354e+10	factor() - entry.for.body_crit_edge
  8. 6.079% 2464145360/4.05354e+10	factor() - if.then4
  9. 4.64086% 1881189084/4.05354e+10	xferFactors() - for.end
 10. 4.53033% 1836383434/4.05354e+10	factor() - for.end
 11. 3.11589% 1263038457/4.05354e+10	factor() - entry.for.end_crit_edge
 12. 2.7854% 1129072481/4.05354e+10	factor() - if.end18
 13. 2.68914% 1090052341/4.05354e+10	xferFactors() - entry
 14. 2.58138% 1046370345/4.05354e+10	xferFactors() - if.end
 15. 2.58051% 1046020325/4.05354e+10	xferFactors() - if.then
 16. 1.37269% 556425168/4.05354e+10	xferFactors() - for.body
 17. 1.30996% 530996282/4.05354e+10	factor() - if.then.i49
 18. 1.23595% 500996313/4.05354e+10	main() - entry
 19. 1.23595% 500996306/4.05354e+10	factor() - for.body.lr.ph.i57
 20. 1.23595% 500996306/4.05354e+10	factor() - if.end.i56
