WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./block_test.profile 5000 
  9. ./block_test.profile 7500 
  10. ./block_test.profile 10000 
  11. ./block_test.profile 12500 
  12. ./block_test.profile 15000 
  13. ./block_test.profile 5000 
  14. ./block_test.profile 15000 
  15. ./blocked.profile 900 
  16. ./blocked.profile 1000 
  17. ./blocked.profile 1100 
  18. ./blocked.profile 1200 
  19. ./blocked.profile 1300 
  20. ./blocked.profile 1400 
  21. ./blocked.profile 900 
  22. ./blocked.profile 1400 
  23. ./factor.profile 2000000 
  24. ./factor.profile 3000000 
  25. ./factor.profile 4000000 
  26. ./factor.profile 5000000 
  27. ./factor.profile 6000000 
  28. ./factor.profile 2000000 
  29. ./factor.profile 6000000 
  30. ./bubble.profile 50000 
  31. ./bubble.profile 100000 
  32. ./bubble.profile 150000 
  33. ./bubble.profile 200000 
  34. ./bubble.profile 250000 
  35. ./bubble.profile 50000 
  36. ./bubble.profile 250000 
  37. ./quicksort.profile 50000 
  38. ./quicksort.profile 100000 
  39. ./quicksort.profile 150000 
  40. ./quicksort.profile 50000 
  41. ./kmeans.profile 10000 10 
  42. ./kmeans.profile 100000 10 
  43. ./kmeans.profile 1000000 10 
  44. ./kmeans.profile 1000000 20 
  45. ./kmeans.profile 1000000 50 
  46. ./kmeans.profile 10000 10 
  47. ./kmeans.profile 1000000 50 
  48. ./permutations.profile 8 
  49. ./permutations.profile 9 
  50. ./permutations.profile 10 
  51. ./permutations.profile 11 
  52. ./permutations.profile 12 
  53. ./permutations.profile 8 
  54. ./permutations.profile 12 
  55. ./mandlebrot_seq.profile 1000 
  56. ./mandlebrot_seq.profile 1250 
  57. ./mandlebrot_seq.profile 1500 
  58. ./mandlebrot_seq.profile 1750 
  59. ./mandlebrot_seq.profile 2000 
  60. ./mandlebrot_seq.profile 2250 
  61. ./mandlebrot_seq.profile 1000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./fft.profile 128 
  64. ./fft.profile 256 
  65. ./fft.profile 1024 
  66. ./fft.profile 4096 
  67. ./fft.profile 8192 
  68. ./fft.profile 128 
  69. ./fft.profile 8192 
  70. ./huffman_priority_queue.profile 100 
  71. ./huffman_priority_queue.profile 1000 
  72. ./huffman_priority_queue.profile 10000 
  73. ./huffman_priority_queue.profile 100000 
  74. ./huffman_priority_queue.profile 1000000 
  75. ./huffman_priority_queue.profile 100 
  76. ./huffman_priority_queue.profile 1000000 
  77. ./huffman.profile 100 
  78. ./huffman.profile 1000 
  79. ./huffman.profile 10000 
  80. ./huffman.profile 100000 
  81. ./huffman.profile 1000000 
  82. ./huffman.profile 100 
  83. ./huffman.profile 1000000 
  84. ./combinations.profile 13 
  85. ./combinations.profile 14 
  86. ./combinations.profile 15 
  87. ./combinations.profile 16 
  88. ./combinations.profile 17 
  89. ./combinations.profile 13 
  90. ./combinations.profile 17 
  91. ./cholesky.profile 65536 
  92. ./cholesky.profile 262144 
  93. ./cholesky.profile 524288 
  94. ./cholesky.profile 786432 
  95. ./cholesky.profile 1310720 
  96. ./cholesky.profile 65536 
  97. ./cholesky.profile 1310720 
  98. ./deconvolution.profile 256 
  99. ./deconvolution.profile 512 
  100. ./deconvolution.profile 1024 
  101. ./deconvolution.profile 2048 
  102. ./deconvolution.profile 256 
  103. ./deconvolution.profile 2048 
  104. ./euler_method.profile 16384 
  105. ./euler_method.profile 32768 
  106. ./euler_method.profile 65536 
  107. ./euler_method.profile 98304 
  108. ./euler_method.profile 131072 
  109. ./euler_method.profile 16384 
  110. ./euler_method.profile 131072 
  111. ./lucas.profile 75000 
  112. ./lucas.profile 100000 
  113. ./lucas.profile 125000 
  114. ./lucas.profile 150000 
  115. ./lucas.profile 175000 
  116. ./lucas.profile 75000 
  117. ./lucas.profile 175000 
  118. ./aes.profile 250000 
  119. ./aes.profile 500000 
  120. ./aes.profile 750000 
  121. ./aes.profile 1000000 
  122. ./aes.profile 1250000 
  123. ./aes.profile 250000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 3.4e+09/6.2628e+09 getSBoxValue
  2. 1.2e+09/6.2628e+09 KeyExpansion
  3. 1.1e+09/6.2628e+09 SubBytes
  4. 1.8e+08/6.2628e+09 ShiftRows
  5. 1.6e+08/6.2628e+09 MixColumns
  6. 1.3e+08/6.2628e+09 Cipher
  7. 5.7e+07/6.2628e+09 main
  8. 5.2e+06/6.2628e+09 AddRoundKey

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 7.52835% 4652366877/6.17979e+10	KeyExpansion() - for.cond23.preheader.us
  2. 5.94579% 3674373568/6.17979e+10	KeyExpansion() - if.end91.us.for.cond23.preheader.us_crit_edge
  3. 5.8897% 3639713366/6.17979e+10	KeyExpansion() - for.cond.while.cond.preheader_crit_edge
  4. 5.57061% 3442518778/6.17979e+10	getSBoxValue() - entry
  5. 5.4906% 3393079341/6.17979e+10	KeyExpansion() - for.body.for.body_crit_edge
  6. 4.58934% 2836114495/6.17979e+10	KeyExpansion() - if.then.us
  7. 4.50452% 2783701688/6.17979e+10	MixColumns() - for.body.for.body_crit_edge
  8. 4.34904% 2687615213/6.17979e+10	KeyExpansion() - for.cond23.preheader.lr.ph.for.cond23.preheader.us_crit_edge
  9. 4.01048% 2478391560/6.17979e+10	KeyExpansion() - while.end
 10. 3.98764% 2464276160/6.17979e+10	KeyExpansion() - if.end91.us.while.end_crit_edge
 11. 3.85279% 2380946667/6.17979e+10	KeyExpansion() - entry.while.cond.preheader_crit_edge
 12. 3.73157% 2306035302/6.17979e+10	KeyExpansion() - for.body
 13. 3.66311% 2263723725/6.17979e+10	KeyExpansion() - for.body.lr.ph
 14. 3.64957% 2255356126/6.17979e+10	KeyExpansion() - for.cond23.preheader
 15. 3.46336% 2140287754/6.17979e+10	KeyExpansion() - while.cond.preheader
 16. 3.28607% 2030723468/6.17979e+10	KeyExpansion() - if.then70.us
 17. 3.22078% 1990373117/6.17979e+10	KeyExpansion() - if.else.us.if.end91.us_crit_edge
 18. 3.10431% 1918401639/6.17979e+10	KeyExpansion() - for.cond23.preheader.lr.ph
 19. 2.89645% 1789948285/6.17979e+10	KeyExpansion() - for.cond23.preheader.lr.ph.for.cond23.preheader_crit_edge
 20. 2.38679% 1474988496/6.17979e+10	KeyExpansion() - while.cond.preheader.while.end_crit_edge
