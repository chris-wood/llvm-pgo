===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./block_test.profile 5000 
  9. ./block_test.profile 7500 
  10. ./block_test.profile 10000 
  11. ./block_test.profile 12500 
  12. ./block_test.profile 15000 
  13. ./block_test.profile 5000 
  14. ./block_test.profile 15000 
  15. ./blocked.profile 900 
  16. ./blocked.profile 1000 
  17. ./blocked.profile 1100 
  18. ./blocked.profile 1200 
  19. ./blocked.profile 1300 
  20. ./blocked.profile 1400 
  21. ./blocked.profile 900 
  22. ./blocked.profile 1400 
  23. ./factor.profile 2000000 
  24. ./factor.profile 3000000 
  25. ./factor.profile 4000000 
  26. ./factor.profile 5000000 
  27. ./factor.profile 6000000 
  28. ./factor.profile 2000000 
  29. ./factor.profile 6000000 
  30. ./bubble.profile 50000 
  31. ./bubble.profile 100000 
  32. ./bubble.profile 150000 
  33. ./bubble.profile 200000 
  34. ./bubble.profile 250000 
  35. ./bubble.profile 50000 
  36. ./bubble.profile 250000 
  37. ./quicksort.profile 50000 
  38. ./quicksort.profile 100000 
  39. ./quicksort.profile 150000 
  40. ./quicksort.profile 50000 
  41. ./kmeans.profile 10000 10 
  42. ./kmeans.profile 100000 10 
  43. ./kmeans.profile 1000000 10 
  44. ./kmeans.profile 1000000 20 
  45. ./kmeans.profile 1000000 50 
  46. ./kmeans.profile 10000 10 
  47. ./kmeans.profile 1000000 50 
  48. ./permutations.profile 8 
  49. ./permutations.profile 9 
  50. ./permutations.profile 10 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 3.6e+09/3.89083e+09 perm1
  2. 3e+08/3.89083e+09 boothroyd
  3. 4e+06/3.89083e+09 show
  4. 1.4e+06/3.89083e+09 perm3
  5. 9.2e+03/3.89083e+09 next_lex_perm
  6.    10/3.89083e+09 perm2
  7.     7/3.89083e+09 main

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 20.6847% 7066358900/3.41622e+10	next_lex_perm() - for.body21
  2. 10.489% 3583262465/3.41622e+10	perm1() - entry
  3. 9.89241% 3379464630/3.41622e+10	next_lex_perm() - return
  4. 8.13093% 2777703856/3.41622e+10	next_lex_perm() - for.cond6.for.cond6_crit_edge
  5. 8.12893% 2777018802/3.41622e+10	next_lex_perm() - for.cond
  6. 7.98634% 2728309083/3.41622e+10	boothroyd() - if.end.us
  7. 7.50596% 2564200119/3.41622e+10	perm1() - for.end13.i.us.for.cond.i.us_crit_edge
  8. 7.21305% 2464136160/3.41622e+10	next_lex_perm() - for.body21.for.body21_crit_edge
  9. 5.86667% 2004183265/3.41622e+10	next_lex_perm() - for.cond6
 10. 2.70028% 922475480/3.41622e+10	perm1() - entry.for.cond.i.us_crit_edge
 11. 2.15594% 736515886/3.41622e+10	next_lex_perm() - for.end13
 12. 1.7685% 604159574/3.41622e+10	boothroyd() - if.end.us32
 13. 0.884252% 302080003/3.41622e+10	boothroyd() - if.then11.us
 14. 0.884252% 302080003/3.41622e+10	boothroyd() - if.end.us.if.then3_crit_edge
 15. 0.884252% 302080000/3.41622e+10	boothroyd() - if.end4.us.if.end.us_crit_edge
 16. 0.884251% 302079573/3.41622e+10	boothroyd() - entry
 17. 0.547974% 187199792/3.41622e+10	perm1() - for.cond6.i.us
 18. 0.46243% 157976098/3.41622e+10	perm1() - for.end13.i.us.for.body21.i.us_crit_edge
 19. 0.46239% 157962453/3.41622e+10	perm1() - for.cond.i.us
 20. 0.453952% 155079813/3.41622e+10	perm1() - land.rhs.i.us.for.cond.i.us_crit_edge
