===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./block_test.profile 5000 
  9. ./block_test.profile 7500 
  10. ./block_test.profile 10000 
  11. ./block_test.profile 12500 
  12. ./block_test.profile 15000 
  13. ./block_test.profile 5000 
  14. ./block_test.profile 15000 
  15. ./blocked.profile 900 
  16. ./blocked.profile 1000 
  17. ./blocked.profile 1100 
  18. ./blocked.profile 1200 
  19. ./blocked.profile 1300 
  20. ./blocked.profile 1400 
  21. ./blocked.profile 900 
  22. ./blocked.profile 1400 
  23. ./factor.profile 2000000 
  24. ./factor.profile 3000000 
  25. ./factor.profile 4000000 
  26. ./factor.profile 5000000 
  27. ./factor.profile 6000000 
  28. ./factor.profile 2000000 
  29. ./factor.profile 6000000 
  30. ./bubble.profile 50000 
  31. ./bubble.profile 100000 
  32. ./bubble.profile 150000 
  33. ./bubble.profile 200000 
  34. ./bubble.profile 250000 
  35. ./bubble.profile 50000 
  36. ./bubble.profile 250000 
  37. ./quicksort.profile 50000 
  38. ./quicksort.profile 100000 
  39. ./quicksort.profile 150000 
  40. ./quicksort.profile 50000 
  41. ./kmeans.profile 10000 10 
  42. ./kmeans.profile 100000 10 
  43. ./kmeans.profile 1000000 10 
  44. ./kmeans.profile 1000000 20 
  45. ./kmeans.profile 1000000 50 
  46. ./kmeans.profile 10000 10 
  47. ./kmeans.profile 1000000 50 
  48. ./permutations.profile 8 
  49. ./permutations.profile 9 
  50. ./permutations.profile 10 
  51. ./permutations.profile 11 
  52. ./permutations.profile 12 
  53. ./permutations.profile 8 
  54. ./permutations.profile 12 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 3.6e+09/5.2472e+09 perm1
  2. 1e+09/5.2472e+09 show
  3. 3.6e+08/5.2472e+09 perm3
  4. 3e+08/5.2472e+09 boothroyd
  5. 9.2e+03/5.2472e+09 next_lex_perm
  6.    14/5.2472e+09 perm2
  7.     7/5.2472e+09 main

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 12.0835% 7066358900/5.84792e+10	next_lex_perm() - for.body21
  2. 6.12741% 3583262465/5.84792e+10	perm1() - entry
  3. 5.77891% 3379464630/5.84792e+10	next_lex_perm() - return
  4. 4.75731% 2782036722/5.84792e+10	perm1() - for.end13.i.us.for.cond.i.us_crit_edge
  5. 4.7499% 2777703856/5.84792e+10	next_lex_perm() - for.cond6.for.cond6_crit_edge
  6. 4.74873% 2777018802/5.84792e+10	next_lex_perm() - for.cond
  7. 4.66543% 2728309087/5.84792e+10	boothroyd() - if.end.us
  8. 4.21369% 2464136160/5.84792e+10	next_lex_perm() - for.body21.for.body21_crit_edge
  9. 3.42717% 2004183265/5.84792e+10	next_lex_perm() - for.cond6
 10. 2.94413% 1721705341/5.84792e+10	perm2() - entry.if.end_crit_edge
 11. 2.94413% 1721705188/5.84792e+10	perm2() - if.end
 12. 2.64394% 1546154911/5.84792e+10	perm3() - while.cond
 13. 1.71401% 1002342321/5.84792e+10	show() - for.end
 14. 1.71342% 1001992466/5.84792e+10	perm1() - for.cond.i
 15. 1.71342% 1001992327/5.84792e+10	boothroyd() - if.end.if.then3_crit_edge
 16. 1.71342% 1001992325/5.84792e+10	show() - entry
 17. 1.71342% 1001992320/5.84792e+10	boothroyd() - if.end
 18. 1.71342% 1001992320/5.84792e+10	main() - entry.for.end_crit_edge
 19. 1.71342% 1001992320/5.84792e+10	perm3() - done
 20. 1.71342% 1001992317/5.84792e+10	show() - for.body.lr.ph
