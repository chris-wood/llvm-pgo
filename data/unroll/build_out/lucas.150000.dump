Number of Mersenne primes up to 150000 = 1957
WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./block_test.profile 5000 
  9. ./block_test.profile 7500 
  10. ./block_test.profile 10000 
  11. ./block_test.profile 12500 
  12. ./block_test.profile 15000 
  13. ./block_test.profile 5000 
  14. ./block_test.profile 15000 
  15. ./blocked.profile 900 
  16. ./blocked.profile 1000 
  17. ./blocked.profile 1100 
  18. ./blocked.profile 1200 
  19. ./blocked.profile 1300 
  20. ./blocked.profile 1400 
  21. ./blocked.profile 900 
  22. ./blocked.profile 1400 
  23. ./factor.profile 2000000 
  24. ./factor.profile 3000000 
  25. ./factor.profile 4000000 
  26. ./factor.profile 5000000 
  27. ./factor.profile 6000000 
  28. ./factor.profile 2000000 
  29. ./factor.profile 6000000 
  30. ./bubble.profile 50000 
  31. ./bubble.profile 100000 
  32. ./bubble.profile 150000 
  33. ./bubble.profile 200000 
  34. ./bubble.profile 250000 
  35. ./bubble.profile 50000 
  36. ./bubble.profile 250000 
  37. ./quicksort.profile 50000 
  38. ./quicksort.profile 100000 
  39. ./quicksort.profile 150000 
  40. ./quicksort.profile 50000 
  41. ./kmeans.profile 10000 10 
  42. ./kmeans.profile 100000 10 
  43. ./kmeans.profile 1000000 10 
  44. ./kmeans.profile 1000000 20 
  45. ./kmeans.profile 1000000 50 
  46. ./kmeans.profile 10000 10 
  47. ./kmeans.profile 1000000 50 
  48. ./permutations.profile 8 
  49. ./permutations.profile 9 
  50. ./permutations.profile 10 
  51. ./permutations.profile 11 
  52. ./permutations.profile 12 
  53. ./permutations.profile 8 
  54. ./permutations.profile 12 
  55. ./mandlebrot_seq.profile 1000 
  56. ./mandlebrot_seq.profile 1250 
  57. ./mandlebrot_seq.profile 1500 
  58. ./mandlebrot_seq.profile 1750 
  59. ./mandlebrot_seq.profile 2000 
  60. ./mandlebrot_seq.profile 2250 
  61. ./mandlebrot_seq.profile 1000 
  62. ./mandlebrot_seq.profile 2250 
  63. ./fft.profile 128 
  64. ./fft.profile 256 
  65. ./fft.profile 1024 
  66. ./fft.profile 4096 
  67. ./fft.profile 8192 
  68. ./fft.profile 128 
  69. ./fft.profile 8192 
  70. ./huffman_priority_queue.profile 100 
  71. ./huffman_priority_queue.profile 1000 
  72. ./huffman_priority_queue.profile 10000 
  73. ./huffman_priority_queue.profile 100000 
  74. ./huffman_priority_queue.profile 1000000 
  75. ./huffman_priority_queue.profile 100 
  76. ./huffman_priority_queue.profile 1000000 
  77. ./huffman.profile 100 
  78. ./huffman.profile 1000 
  79. ./huffman.profile 10000 
  80. ./huffman.profile 100000 
  81. ./huffman.profile 1000000 
  82. ./huffman.profile 100 
  83. ./huffman.profile 1000000 
  84. ./combinations.profile 13 
  85. ./combinations.profile 14 
  86. ./combinations.profile 15 
  87. ./combinations.profile 16 
  88. ./combinations.profile 17 
  89. ./combinations.profile 13 
  90. ./combinations.profile 17 
  91. ./cholesky.profile 65536 
  92. ./cholesky.profile 262144 
  93. ./cholesky.profile 524288 
  94. ./cholesky.profile 786432 
  95. ./cholesky.profile 1310720 
  96. ./cholesky.profile 65536 
  97. ./cholesky.profile 1310720 
  98. ./deconvolution.profile 256 
  99. ./deconvolution.profile 512 
  100. ./deconvolution.profile 1024 
  101. ./deconvolution.profile 2048 
  102. ./deconvolution.profile 256 
  103. ./deconvolution.profile 2048 
  104. ./euler_method.profile 16384 
  105. ./euler_method.profile 32768 
  106. ./euler_method.profile 65536 
  107. ./euler_method.profile 98304 
  108. ./euler_method.profile 131072 
  109. ./euler_method.profile 16384 
  110. ./euler_method.profile 131072 
  111. ./lucas.profile 75000 
  112. ./lucas.profile 100000 
  113. ./lucas.profile 125000 
  114. ./lucas.profile 150000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 3.4e+09/3.51681e+09 is_prime
  2. 4.6e+07/3.51681e+09 is_mersenne_prime
  3. 2.8e+07/3.51681e+09 main

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 13.2968% 8178588351/6.15079e+10	is_prime() - return
  2. 5.97383% 3674373565/6.15079e+10	is_mersenne_prime() - if.else
  3. 5.87355% 3612697605/6.15079e+10	is_mersenne_prime() - for.end
  4. 5.8491% 3597660148/6.15079e+10	is_prime() - for.body
  5. 5.59687% 3442518778/6.15079e+10	is_prime() - entry
  6. 5.51621% 3392905872/6.15079e+10	is_mersenne_prime() - for.body
  7. 5.4743% 3367128542/6.15079e+10	is_mersenne_prime() - if.else.for.body_crit_edge
  8. 4.61829% 2840613716/6.15079e+10	main() - for.inc
  9. 4.56546% 2808114495/6.15079e+10	is_prime() - for.body.return_crit_edge
 10. 4.01678% 2470635605/6.15079e+10	is_mersenne_prime() - return
 11. 3.95328% 2431575768/6.15079e+10	main() - for.body.is_mersenne_prime.exit_crit_edge
 12. 3.67388% 2259723725/6.15079e+10	is_prime() - if.else
 13. 3.11895% 1918401639/6.15079e+10	is_prime() - if.else4.return_crit_edge
 14. 2.9699% 1826723468/6.15079e+10	is_prime() - for.cond
 15. 2.86459% 1761948285/6.15079e+10	is_prime() - for.cond.return_crit_edge
 16. 2.39154% 1470988496/6.15079e+10	is_prime() - if.else4.for.body_crit_edge
 17. 2.24195% 1378976530/6.15079e+10	is_prime() - if.else4
 18. 2.19067% 1347436303/6.15079e+10	is_prime() - for.cond.for.body_crit_edge
 19. 1.923% 1182795053/6.15079e+10	is_prime() - entry.return_crit_edge
 20. 1.83825% 1130668200/6.15079e+10	main() - for.body.i
Number of Mersenne primes up to 150000 = 1957
