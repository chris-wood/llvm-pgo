WARNING: profile information is inconsistent with the current program!
===-------------------------------------------------------------------------===
LLVM profiling output for executions:
  1. ./is_prime.profile 65536 
  2. ./is_prime.profile 131072 
  3. ./is_prime.profile 262144 
  4. ./is_prime.profile 524288 
  5. ./is_prime.profile 1048576 
  6. ./is_prime.profile 65536 
  7. ./is_prime.profile 1048576 
  8. ./block_test.profile 5000 
  9. ./block_test.profile 7500 
  10. ./block_test.profile 10000 
  11. ./block_test.profile 12500 
  12. ./block_test.profile 15000 
  13. ./block_test.profile 5000 
  14. ./block_test.profile 15000 
  15. ./blocked.profile 900 
  16. ./blocked.profile 1000 
  17. ./blocked.profile 1100 
  18. ./blocked.profile 1200 
  19. ./blocked.profile 1300 
  20. ./blocked.profile 1400 
  21. ./blocked.profile 900 
  22. ./blocked.profile 1400 
  23. ./factor.profile 2000000 
  24. ./factor.profile 3000000 
  25. ./factor.profile 4000000 
  26. ./factor.profile 5000000 
  27. ./factor.profile 6000000 
  28. ./factor.profile 2000000 
  29. ./factor.profile 6000000 
  30. ./bubble.profile 50000 

===-------------------------------------------------------------------------===
Function execution frequencies:

 ##   Frequency
  1. 1.1e+07/1.09407e+07 main
  2.     8/1.09407e+07 bubbleSort

===-------------------------------------------------------------------------===
Top 20 most frequently executed basic blocks:

 ##      %% 	Frequency
  1. 22.6794% 2777353862/1.22462e+10	bubbleSort() - for.end16
  2. 22.6767% 2777027992/1.22462e+10	bubbleSort() - for.cond1.outer
  3. 12.7079% 1556231830/1.22462e+10	main() - for.body
  4. 10.6643% 1305972870/1.22462e+10	main() - bubbleSort.exit
  5. 7.52463% 921479128/1.22462e+10	main() - for.end.bubbleSort.exit_crit_edge
  6. 6.86398% 840575302/1.22462e+10	main() - for.end.for.cond1.preheader.i_crit_edge
  7. 6.0114% 736165884/1.22462e+10	bubbleSort() - for.end.for.end16_crit_edge
  8. 5.09892% 624422073/1.22462e+10	main() - for.body.for.body_crit_edge
  9. 1.76764% 216468274/1.22462e+10	bubbleSort() - for.cond1.preheader
 10. 1.76716% 216409185/1.22462e+10	bubbleSort() - for.end.for.cond1.preheader_crit_edge
 11. 0.457172% 55986113/1.22462e+10	main() - for.cond1.outer.i
 12. 0.25433% 31145701/1.22462e+10	bubbleSort() - for.body3.for.cond1_crit_edge
 13. 0.228755% 28013672/1.22462e+10	main() - for.cond1.preheader.i
 14. 0.228643% 28000008/1.22462e+10	bubbleSort() - for.cond1
 15. 0.228643% 27999986/1.22462e+10	main() - for.body3.i
 16. 0.228643% 27999986/1.22462e+10	main() - for.end.i.for.cond1.preheader.i_crit_edge
 17. 0.228641% 27999813/1.22462e+10	main() - for.body3.i.for.cond1.i_crit_edge
 18. 0.114533% 14025887/1.22462e+10	main() - entry.bubbleSort.exit_crit_edge
 19. 0.0898227% 10999841/1.22462e+10	main() - entry.for.body_crit_edge
 20. 0.0893401% 10940737/1.22462e+10	main() - entry
